; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\Output_App\comm_fifo.o --asm_dir=..\Output_App\ --list_dir=..\Output_App\ --depend=..\Output_App\comm_fifo.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I.\System\CM3 -I.\System\FWlib\inc -I.\System\Startup -I.\ISR -I.\Main -I.\Management\DisplayDriver -I.\Management\HumanInput -I.\Management\Interface -I.\Management\RotationMotor -I.\Management\ScanMotor -I.\Management\Common_CRC -I.\Management\QRCode -I.\Management\SystemManage_RTC -I.\Management\SignalProcess_Sample -I.\USB -I.\USB\comm -I.\USB\lib -I.\USB\src -I.\USB\USB_Communication -ID:\Keil4.0\ARM\RV31\Inc -ID:\Keil4.0\ARM\CMSIS\Include -ID:\Keil4.0\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DUSE_STM3210E_EVAL -W --omf_browse=..\Output_App\comm_fifo.crf USB\comm\Comm_FIFO.c]
                          THUMB

                          AREA ||i.Comm_FIFO_Init||, CODE, READONLY, ALIGN=1

                  Comm_FIFO_Init PROC
;;;10     /******************************************************************************/
;;;11     void Comm_FIFO_Init(FrameFIFOTypedef *FIFO)
000000  b570              PUSH     {r4-r6,lr}
;;;12     {
000002  4604              MOV      r4,r0
;;;13     	uint8 i;
;;;14     	
;;;15     	FIFO->Error = RESET;
000004  2000              MOVS     r0,#0
000006  f2417174          MOV      r1,#0x1774
00000a  5460              STRB     r0,[r4,r1]
;;;16     	FIFO->Free = FIFO_Index;
00000c  2003              MOVS     r0,#3
00000e  1e49              SUBS     r1,r1,#1
000010  5460              STRB     r0,[r4,r1]
;;;17     	FIFO->GetPos = RESET;
000012  2000              MOVS     r0,#0
000014  1e89              SUBS     r1,r1,#2
000016  5460              STRB     r0,[r4,r1]
;;;18     	FIFO->PutPos = RESET;
000018  1e49              SUBS     r1,r1,#1
00001a  5460              STRB     r0,[r4,r1]
;;;19     	FIFO->Size = FIFO_Index;
00001c  2003              MOVS     r0,#3
00001e  1c89              ADDS     r1,r1,#2
000020  5460              STRB     r0,[r4,r1]
;;;20     	
;;;21     	/* FIFO->Buffer清零 */
;;;22     	for(i = 0; i < FIFO_Index; i++)
000022  2500              MOVS     r5,#0
000024  e00b              B        |L1.62|
                  |L1.38|
;;;23     	{
;;;24     		memset(&(FIFO->Buffer[i]), 0, FIFO_LenMax);
000026  eb050145          ADD      r1,r5,r5,LSL #1
00002a  ebc111c5          RSB      r1,r1,r5,LSL #7
00002e  eb041001          ADD      r0,r4,r1,LSL #4
000032  f44f61fa          MOV      r1,#0x7d0
000036  f7fffffe          BL       __aeabi_memclr
00003a  1c68              ADDS     r0,r5,#1              ;22
00003c  b2c5              UXTB     r5,r0                 ;22
                  |L1.62|
00003e  2d03              CMP      r5,#3                 ;22
000040  dbf1              BLT      |L1.38|
;;;25     	}
;;;26     }
000042  bd70              POP      {r4-r6,pc}
;;;27     
                          ENDP


                          AREA ||i.Comm_FIFO_RxDataGet||, CODE, READONLY, ALIGN=1

                  Comm_FIFO_RxDataGet PROC
;;;54     /******************************************************************************/
;;;55     ErrorStatus Comm_FIFO_RxDataGet(FrameFIFOTypedef *SourceData, 
000000  b570              PUSH     {r4-r6,lr}
;;;56     							        DataTypedef *DestinationData)
;;;57     {
000002  4602              MOV      r2,r0
000004  460d              MOV      r5,r1
;;;58     	uint8* pData;
;;;59     	uint8* pDest;
;;;60     	uint16 i;
;;;61     	
;;;62     	/* 没有数据可读,返回错误 */
;;;63     	if(SourceData->Free == SourceData->Size)
000006  f2417073          MOV      r0,#0x1773
00000a  5c10              LDRB     r0,[r2,r0]
00000c  f2417672          MOV      r6,#0x1772
000010  5d96              LDRB     r6,[r2,r6]
000012  42b0              CMP      r0,r6
000014  d101              BNE      |L2.26|
;;;64     	{
;;;65     		return ERROR;
000016  2000              MOVS     r0,#0
                  |L2.24|
;;;66     	}
;;;67     	
;;;68     	/* 获取源数据和目标数据首地址 */
;;;69     	pData = (uint8*)&(SourceData->Buffer[SourceData->GetPos]);
;;;70     	pDest = (uint8*)(DestinationData);
;;;71     	
;;;72     	for(i = 0; i<(*(uint16*)&(SourceData->Buffer[SourceData->GetPos][0]))+2; i++)
;;;73     	{
;;;74     		*pDest = *pData;
;;;75     		pDest++;
;;;76     		pData++;
;;;77     	}
;;;78     
;;;79     	/* 出列地址增加,空白缓存释放 */
;;;80     	SourceData->GetPos++;
;;;81     	SourceData->Free++;
;;;82     	
;;;83     	/* 地址到缓存区末尾,从头再开始 */
;;;84     	if(SourceData->GetPos >= SourceData->Size)
;;;85     	{
;;;86     		SourceData->GetPos = RESET;
;;;87     	}
;;;88     	
;;;89     	/* 数据出列成功 */
;;;90     	return SUCCESS;
;;;91     }
000018  bd70              POP      {r4-r6,pc}
                  |L2.26|
00001a  f2417071          MOV      r0,#0x1771            ;69
00001e  5c10              LDRB     r0,[r2,r0]            ;69
000020  eb000640          ADD      r6,r0,r0,LSL #1       ;69
000024  ebc610c0          RSB      r0,r6,r0,LSL #7       ;69
000028  eb021100          ADD      r1,r2,r0,LSL #4       ;69
00002c  462c              MOV      r4,r5                 ;70
00002e  2300              MOVS     r3,#0                 ;72
000030  e005              B        |L2.62|
                  |L2.50|
000032  7808              LDRB     r0,[r1,#0]            ;74
000034  7020              STRB     r0,[r4,#0]            ;74
000036  1c64              ADDS     r4,r4,#1              ;75
000038  1c49              ADDS     r1,r1,#1              ;76
00003a  1c58              ADDS     r0,r3,#1              ;72
00003c  b283              UXTH     r3,r0                 ;72
                  |L2.62|
00003e  f2417071          MOV      r0,#0x1771            ;72
000042  5c10              LDRB     r0,[r2,r0]            ;72
000044  eb000640          ADD      r6,r0,r0,LSL #1       ;72
000048  ebc610c0          RSB      r0,r6,r0,LSL #7       ;72
00004c  eb021000          ADD      r0,r2,r0,LSL #4       ;72
000050  8800              LDRH     r0,[r0,#0]            ;72
000052  1c80              ADDS     r0,r0,#2              ;72
000054  4298              CMP      r0,r3                 ;72
000056  dcec              BGT      |L2.50|
000058  f2417071          MOV      r0,#0x1771            ;80
00005c  5c10              LDRB     r0,[r2,r0]            ;80
00005e  1c40              ADDS     r0,r0,#1              ;80
000060  f2417671          MOV      r6,#0x1771            ;80
000064  5590              STRB     r0,[r2,r6]            ;80
000066  1cb0              ADDS     r0,r6,#2              ;81
000068  5c10              LDRB     r0,[r2,r0]            ;81
00006a  1c40              ADDS     r0,r0,#1              ;81
00006c  1cb6              ADDS     r6,r6,#2              ;81
00006e  5590              STRB     r0,[r2,r6]            ;81
000070  1eb0              SUBS     r0,r6,#2              ;84
000072  5c10              LDRB     r0,[r2,r0]            ;84
000074  1e76              SUBS     r6,r6,#1              ;84
000076  5d96              LDRB     r6,[r2,r6]            ;84
000078  42b0              CMP      r0,r6                 ;84
00007a  db03              BLT      |L2.132|
00007c  2000              MOVS     r0,#0                 ;86
00007e  f2417671          MOV      r6,#0x1771            ;86
000082  5590              STRB     r0,[r2,r6]            ;86
                  |L2.132|
000084  2001              MOVS     r0,#1                 ;90
000086  e7c7              B        |L2.24|
;;;92     
                          ENDP


                          AREA ||i.Comm_FIFO_RxDataPut||, CODE, READONLY, ALIGN=1

                  Comm_FIFO_RxDataPut PROC
;;;28     /******************************************************************************/
;;;29     ErrorStatus Comm_FIFO_RxDataPut(DataTypedef *SourceData,FrameFIFOTypedef *DestinationData)
000000  b570              PUSH     {r4-r6,lr}
;;;30     {	
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;31     	/* 没有空余缓存,无法入列,返回错误 */
;;;32     	if(DestinationData->Free == RESET)
000006  f2417073          MOV      r0,#0x1773
00000a  5c20              LDRB     r0,[r4,r0]
00000c  b908              CBNZ     r0,|L3.18|
;;;33     	{
;;;34     		return ERROR;
00000e  2000              MOVS     r0,#0
                  |L3.16|
;;;35     	}
;;;36     	
;;;37     	/* 数据长度到FIFO */
;;;38     	memcpy((uint8*)&(DestinationData->Buffer[DestinationData->PutPos]),SourceData, SourceData->len+2);
;;;39     	
;;;40     	/* 入列地址增加,空白缓存减少 */
;;;41     	DestinationData->PutPos++;
;;;42     	DestinationData->Free--;
;;;43     	
;;;44     	/* 地址到缓存区末尾,从头再开始 */
;;;45     	if(DestinationData->PutPos >= DestinationData->Size)
;;;46     	{
;;;47     		DestinationData->PutPos = RESET;
;;;48     	}
;;;49     	
;;;50     	/* 数据入列成功 */
;;;51     	return SUCCESS; 
;;;52     }
000010  bd70              POP      {r4-r6,pc}
                  |L3.18|
000012  8829              LDRH     r1,[r5,#0]            ;38
000014  1c8a              ADDS     r2,r1,#2              ;38
000016  f2417170          MOV      r1,#0x1770            ;38
00001a  5c61              LDRB     r1,[r4,r1]            ;38
00001c  eb010341          ADD      r3,r1,r1,LSL #1       ;38
000020  ebc311c1          RSB      r1,r3,r1,LSL #7       ;38
000024  eb041001          ADD      r0,r4,r1,LSL #4       ;38
000028  4629              MOV      r1,r5                 ;38
00002a  f7fffffe          BL       __aeabi_memcpy
00002e  f2417070          MOV      r0,#0x1770            ;41
000032  5c20              LDRB     r0,[r4,r0]            ;41
000034  1c40              ADDS     r0,r0,#1              ;41
000036  f2417170          MOV      r1,#0x1770            ;41
00003a  5460              STRB     r0,[r4,r1]            ;41
00003c  1cc8              ADDS     r0,r1,#3              ;42
00003e  5c20              LDRB     r0,[r4,r0]            ;42
000040  1e40              SUBS     r0,r0,#1              ;42
000042  1cc9              ADDS     r1,r1,#3              ;42
000044  5460              STRB     r0,[r4,r1]            ;42
000046  1ec8              SUBS     r0,r1,#3              ;45
000048  5c20              LDRB     r0,[r4,r0]            ;45
00004a  1e49              SUBS     r1,r1,#1              ;45
00004c  5c61              LDRB     r1,[r4,r1]            ;45
00004e  4288              CMP      r0,r1                 ;45
000050  db03              BLT      |L3.90|
000052  2000              MOVS     r0,#0                 ;47
000054  f2417170          MOV      r1,#0x1770            ;47
000058  5460              STRB     r0,[r4,r1]            ;47
                  |L3.90|
00005a  2001              MOVS     r0,#1                 ;51
00005c  e7d8              B        |L3.16|
;;;53     
                          ENDP


                          AREA ||i.Comm_FIFO_TxDataGet||, CODE, READONLY, ALIGN=1

                  Comm_FIFO_TxDataGet PROC
;;;133    /******************************************************************************/
;;;134    ErrorStatus Comm_FIFO_TxDataGet(FrameFIFOTypedef *SourceData, 
000000  b570              PUSH     {r4-r6,lr}
;;;135    							        DataTypedef *DestinationData)
;;;136    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;137    	/* 没有数据可读,返回错误 */
;;;138    	if(SourceData->Free == SourceData->Size)
000006  f2417073          MOV      r0,#0x1773
00000a  5c20              LDRB     r0,[r4,r0]
00000c  f2417172          MOV      r1,#0x1772
000010  5c61              LDRB     r1,[r4,r1]
000012  4288              CMP      r0,r1
000014  d101              BNE      |L4.26|
;;;139    	{
;;;140    		return ERROR;
000016  2000              MOVS     r0,#0
                  |L4.24|
;;;141    	}
;;;142    	
;;;143    	/* 从FIFO Copy Data到发送区 */
;;;144    	memcpy(DestinationData,&SourceData->Buffer[SourceData->GetPos][0],(*(uint16*)&(SourceData->Buffer[SourceData->GetPos][0]))+2);
;;;145    	
;;;146    	/* 出列地址增加,空白缓存释放 */
;;;147    	SourceData->GetPos++;
;;;148    	SourceData->Free++;
;;;149    	
;;;150    	/* 地址到缓存区末尾,从头再开始 */
;;;151    	if(SourceData->GetPos >= SourceData->Size)
;;;152    	{
;;;153    		SourceData->GetPos = RESET;
;;;154    	}
;;;155    	
;;;156    	/* 数据出列成功 */
;;;157    	return SUCCESS;
;;;158    }
000018  bd70              POP      {r4-r6,pc}
                  |L4.26|
00001a  f2417071          MOV      r0,#0x1771            ;144
00001e  5c20              LDRB     r0,[r4,r0]            ;144
000020  eb000340          ADD      r3,r0,r0,LSL #1       ;144
000024  ebc310c0          RSB      r0,r3,r0,LSL #7       ;144
000028  eb041000          ADD      r0,r4,r0,LSL #4       ;144
00002c  8800              LDRH     r0,[r0,#0]            ;144
00002e  1c82              ADDS     r2,r0,#2              ;144
000030  f2417071          MOV      r0,#0x1771            ;144
000034  5c20              LDRB     r0,[r4,r0]            ;144
000036  eb000340          ADD      r3,r0,r0,LSL #1       ;144
00003a  ebc310c0          RSB      r0,r3,r0,LSL #7       ;144
00003e  eb041100          ADD      r1,r4,r0,LSL #4       ;144
000042  4628              MOV      r0,r5                 ;144
000044  f7fffffe          BL       __aeabi_memcpy
000048  f2417071          MOV      r0,#0x1771            ;147
00004c  5c20              LDRB     r0,[r4,r0]            ;147
00004e  1c40              ADDS     r0,r0,#1              ;147
000050  f2417171          MOV      r1,#0x1771            ;147
000054  5460              STRB     r0,[r4,r1]            ;147
000056  1c88              ADDS     r0,r1,#2              ;148
000058  5c20              LDRB     r0,[r4,r0]            ;148
00005a  1c40              ADDS     r0,r0,#1              ;148
00005c  1c89              ADDS     r1,r1,#2              ;148
00005e  5460              STRB     r0,[r4,r1]            ;148
000060  1e88              SUBS     r0,r1,#2              ;151
000062  5c20              LDRB     r0,[r4,r0]            ;151
000064  1e49              SUBS     r1,r1,#1              ;151
000066  5c61              LDRB     r1,[r4,r1]            ;151
000068  4288              CMP      r0,r1                 ;151
00006a  db03              BLT      |L4.116|
00006c  2000              MOVS     r0,#0                 ;153
00006e  f2417171          MOV      r1,#0x1771            ;153
000072  5460              STRB     r0,[r4,r1]            ;153
                  |L4.116|
000074  2001              MOVS     r0,#1                 ;157
000076  e7cf              B        |L4.24|
                          ENDP


                          AREA ||i.Comm_FIFO_TxDataPut||, CODE, READONLY, ALIGN=1

                  Comm_FIFO_TxDataPut PROC
;;;93     /******************************************************************************/
;;;94     ErrorStatus Comm_FIFO_TxDataPut(DataTypedef *SourceData,
000000  b570              PUSH     {r4-r6,lr}
;;;95     							        FrameFIFOTypedef *DestinationData)
;;;96     {	
000002  4602              MOV      r2,r0
;;;97     	uint8* pDest;
;;;98     	uint8* pData;
;;;99     	uint8 i;
;;;100    	
;;;101    	/* 没有空余缓存,无法入列,返回错误 */
;;;102    	if(DestinationData->Free == RESET)
000004  f2417073          MOV      r0,#0x1773
000008  5c08              LDRB     r0,[r1,r0]
00000a  b908              CBNZ     r0,|L5.16|
;;;103    	{
;;;104    		return ERROR;
00000c  2000              MOVS     r0,#0
                  |L5.14|
;;;105    	}
;;;106    	
;;;107    	/* 获取源数据和目标数据首地址 */
;;;108    	pData = (uint8*)SourceData;
;;;109    	pDest = (uint8*)&(DestinationData->Buffer[DestinationData->PutPos]);
;;;110    	
;;;111    	/* 源数据和目标数据一一对应,直接Copy */
;;;112    	for(i = 0; i < SourceData->len+2; i++)
;;;113    	{
;;;114    		*pDest = *pData;
;;;115    		pDest++;
;;;116    		pData++;	
;;;117    	}
;;;118    	
;;;119    	/* 入列地址增加,空白缓存减少 */
;;;120    	DestinationData->PutPos++;
;;;121    	DestinationData->Free--;
;;;122    	
;;;123    	/* 地址到缓存区末尾,从头再开始 */
;;;124    	if(DestinationData->PutPos >= DestinationData->Size)
;;;125    	{
;;;126    		DestinationData->PutPos = RESET;
;;;127    	}
;;;128    	
;;;129    	/* 数据入列成功 */	
;;;130    	return SUCCESS;
;;;131    }
00000e  bd70              POP      {r4-r6,pc}
                  |L5.16|
000010  4613              MOV      r3,r2                 ;108
000012  f2417070          MOV      r0,#0x1770            ;109
000016  5c08              LDRB     r0,[r1,r0]            ;109
000018  eb000640          ADD      r6,r0,r0,LSL #1       ;109
00001c  ebc610c0          RSB      r0,r6,r0,LSL #7       ;109
000020  eb011500          ADD      r5,r1,r0,LSL #4       ;109
000024  2400              MOVS     r4,#0                 ;112
000026  e005              B        |L5.52|
                  |L5.40|
000028  7818              LDRB     r0,[r3,#0]            ;114
00002a  7028              STRB     r0,[r5,#0]            ;114
00002c  1c6d              ADDS     r5,r5,#1              ;115
00002e  1c5b              ADDS     r3,r3,#1              ;116
000030  1c60              ADDS     r0,r4,#1              ;112
000032  b2c4              UXTB     r4,r0                 ;112
                  |L5.52|
000034  8810              LDRH     r0,[r2,#0]            ;112
000036  1c80              ADDS     r0,r0,#2              ;112
000038  42a0              CMP      r0,r4                 ;112
00003a  dcf5              BGT      |L5.40|
00003c  f2417070          MOV      r0,#0x1770            ;120
000040  5c08              LDRB     r0,[r1,r0]            ;120
000042  1c40              ADDS     r0,r0,#1              ;120
000044  f2417670          MOV      r6,#0x1770            ;120
000048  5588              STRB     r0,[r1,r6]            ;120
00004a  1cf0              ADDS     r0,r6,#3              ;121
00004c  5c08              LDRB     r0,[r1,r0]            ;121
00004e  1e40              SUBS     r0,r0,#1              ;121
000050  1cf6              ADDS     r6,r6,#3              ;121
000052  5588              STRB     r0,[r1,r6]            ;121
000054  1ef0              SUBS     r0,r6,#3              ;124
000056  5c08              LDRB     r0,[r1,r0]            ;124
000058  1e76              SUBS     r6,r6,#1              ;124
00005a  5d8e              LDRB     r6,[r1,r6]            ;124
00005c  42b0              CMP      r0,r6                 ;124
00005e  db03              BLT      |L5.104|
000060  2000              MOVS     r0,#0                 ;126
000062  f2417670          MOV      r6,#0x1770            ;126
000066  5588              STRB     r0,[r1,r6]            ;126
                  |L5.104|
000068  2001              MOVS     r0,#1                 ;130
00006a  e7d0              B        |L5.14|
;;;132    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  RxDataFIFO
                          %        6006
                  TxData
                          %        2002

                          AREA ||.data||, DATA, ALIGN=0

                  Comm_RequestTX
000000  00                DCB      0x00
