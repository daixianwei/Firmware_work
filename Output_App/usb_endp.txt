; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\Output_App\usb_endp.o --asm_dir=..\Output_App\ --list_dir=..\Output_App\ --depend=..\Output_App\usb_endp.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I.\System\CM3 -I.\System\FWlib\inc -I.\System\Startup -I.\ISR -I.\Main -I.\Management\DisplayDriver -I.\Management\HumanInput -I.\Management\Interface -I.\Management\RotationMotor -I.\Management\ScanMotor -I.\Management\Common_CRC -I.\Management\QRCode -I.\Management\SystemManage_RTC -I.\Management\SignalProcess_Sample -I.\USB -I.\USB\comm -I.\USB\lib -I.\USB\src -I.\USB\USB_Communication -ID:\Keil4.0\ARM\RV31\Inc -ID:\Keil4.0\ARM\CMSIS\Include -ID:\Keil4.0\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DUSE_STM3210E_EVAL -W --omf_browse=..\Output_App\usb_endp.crf USB\src\usb_endp.c]
                          THUMB

                          AREA ||i.EP1_IN_Callback||, CODE, READONLY, ALIGN=1

                  EP1_IN_Callback PROC
;;;66     *******************************************************************************/
;;;67     void EP1_IN_Callback (void)
000000  4770              BX       lr
;;;68     {
;;;69     
;;;70     
;;;71     
;;;72     }
;;;73     #define TIM_CNT_RELOAD						(9)
                          ENDP


                          AREA ||i.EP3_OUT_Callback||, CODE, READONLY, ALIGN=2

                  EP3_OUT_Callback PROC
;;;122    *******************************************************************************/
;;;123    void EP3_OUT_Callback(void)
000000  b510              PUSH     {r4,lr}
;;;124    {
;;;125    	uint8_t USB_Rx_Cnt;
;;;126    	if(Framelen==0)
000002  480d              LDR      r0,|L2.56|
000004  8800              LDRH     r0,[r0,#0]  ; Framelen
000006  b918              CBNZ     r0,|L2.16|
;;;127    	{
;;;128    		/*1启动定时器*/
;;;129    		TIM_Cmd(TIM2, ENABLE);
000008  2101              MOVS     r1,#1
00000a  0788              LSLS     r0,r1,#30
00000c  f7fffffe          BL       TIM_Cmd
                  |L2.16|
;;;130    	}
;;;131    	USB_Rx_Cnt=USB_SIL_Read(EP3_OUT, &data[Framelen]);
000010  480a              LDR      r0,|L2.60|
000012  4a09              LDR      r2,|L2.56|
000014  8812              LDRH     r2,[r2,#0]  ; Framelen
000016  1881              ADDS     r1,r0,r2
000018  2003              MOVS     r0,#3
00001a  f7fffffe          BL       USB_SIL_Read
00001e  b2c4              UXTB     r4,r0
;;;132    	Framelen+=USB_Rx_Cnt;
000020  4805              LDR      r0,|L2.56|
000022  8800              LDRH     r0,[r0,#0]  ; Framelen
000024  4420              ADD      r0,r0,r4
000026  4904              LDR      r1,|L2.56|
000028  8008              STRH     r0,[r1,#0]
;;;133    	/*清除定时器计时*/
;;;134    	TimeOut_Reload();
00002a  f7fffffe          BL       TimeOut_Reload
;;;135    	/* Enable the receive of data on EP3 */
;;;136    	SetEPRxValid(ENDP3);
00002e  2003              MOVS     r0,#3
000030  f7fffffe          BL       SetEPRxValid
;;;137    }
000034  bd10              POP      {r4,pc}
;;;138    
                          ENDP

000036  0000              DCW      0x0000
                  |L2.56|
                          DCD      Framelen
                  |L2.60|
                          DCD      data

                          AREA ||i.SOF_Callback||, CODE, READONLY, ALIGN=2

                  SOF_Callback PROC
;;;145    *******************************************************************************/
;;;146    void SOF_Callback(void)
000000  b510              PUSH     {r4,lr}
;;;147    {
;;;148    	static uint16_t TxLen=0;
;;;149        uint8_t len = 0;
000002  2400              MOVS     r4,#0
;;;150    
;;;151        if(bDeviceState == CONFIGURED)
000004  4828              LDR      r0,|L3.168|
000006  6800              LDR      r0,[r0,#0]  ; bDeviceState
000008  2805              CMP      r0,#5
00000a  d14b              BNE      |L3.164|
;;;152        {
;;;153        	if(FramelenTx==0)
00000c  4827              LDR      r0,|L3.172|
00000e  8800              LDRH     r0,[r0,#0]  ; FramelenTx
000010  b9c8              CBNZ     r0,|L3.70|
;;;154        	{
;;;155        		if (Comm_RequestTX)
000012  4827              LDR      r0,|L3.176|
000014  7800              LDRB     r0,[r0,#0]  ; Comm_RequestTX
000016  2800              CMP      r0,#0
000018  d044              BEQ      |L3.164|
;;;156        		{
;;;157        			Comm_RequestTX = 0;
00001a  2000              MOVS     r0,#0
00001c  4924              LDR      r1,|L3.176|
00001e  7008              STRB     r0,[r1,#0]
;;;158    				memset(Txdata, 0, 1024);
000020  f44f6180          MOV      r1,#0x400
000024  4823              LDR      r0,|L3.180|
000026  f7fffffe          BL       __aeabi_memclr
;;;159        			memcpy(&Txdata[0], TxData.Data, TxData.len);
00002a  4823              LDR      r0,|L3.184|
00002c  8802              LDRH     r2,[r0,#0]  ; TxData
00002e  1c81              ADDS     r1,r0,#2
000030  4820              LDR      r0,|L3.180|
000032  f7fffffe          BL       __aeabi_memcpy
;;;160        			FramelenTx = TxData.len;
000036  4820              LDR      r0,|L3.184|
000038  8800              LDRH     r0,[r0,#0]  ; TxData
00003a  491c              LDR      r1,|L3.172|
00003c  8008              STRH     r0,[r1,#0]
;;;161        			TxLen = 0;
00003e  2000              MOVS     r0,#0
000040  491e              LDR      r1,|L3.188|
000042  8008              STRH     r0,[r1,#0]
000044  e02e              B        |L3.164|
                  |L3.70|
;;;162    			}
;;;163        	}
;;;164    		else
;;;165    		{	if(FramelenTx < 64)
000046  4819              LDR      r0,|L3.172|
000048  8800              LDRH     r0,[r0,#0]  ; FramelenTx
00004a  2840              CMP      r0,#0x40
00004c  da03              BGE      |L3.86|
;;;166    			{
;;;167    				len = FramelenTx;
00004e  4817              LDR      r0,|L3.172|
000050  8800              LDRH     r0,[r0,#0]  ; FramelenTx
000052  b2c4              UXTB     r4,r0
000054  e000              B        |L3.88|
                  |L3.86|
;;;168    			}
;;;169    			else
;;;170    			{
;;;171    				len = 64;
000056  2440              MOVS     r4,#0x40
                  |L3.88|
;;;172    			}
;;;173    			UserToPMABufferCopy(&Txdata[TxLen], ENDP1_TXADDR, len);
000058  4916              LDR      r1,|L3.180|
00005a  4a18              LDR      r2,|L3.188|
00005c  8812              LDRH     r2,[r2,#0]  ; TxLen
00005e  1888              ADDS     r0,r1,r2
000060  4622              MOV      r2,r4
000062  21c0              MOVS     r1,#0xc0
000064  f7fffffe          BL       UserToPMABufferCopy
;;;174    			SetEPTxCount(ENDP1, len);
000068  4621              MOV      r1,r4
00006a  2001              MOVS     r0,#1
00006c  f7fffffe          BL       SetEPTxCount
;;;175    			SetEPTxValid(ENDP1);
000070  2001              MOVS     r0,#1
000072  f7fffffe          BL       SetEPTxValid
;;;176    			TxLen += len;
000076  4811              LDR      r0,|L3.188|
000078  8800              LDRH     r0,[r0,#0]  ; TxLen
00007a  4420              ADD      r0,r0,r4
00007c  490f              LDR      r1,|L3.188|
00007e  8008              STRH     r0,[r1,#0]
;;;177    			
;;;178    			if(FramelenTx <= 64)
000080  480a              LDR      r0,|L3.172|
000082  8800              LDRH     r0,[r0,#0]  ; FramelenTx
000084  2840              CMP      r0,#0x40
000086  dc08              BGT      |L3.154|
;;;179    			{
;;;180    				/*数据发送结束，清空缓存*/
;;;181    				FramelenTx = 0;
000088  2000              MOVS     r0,#0
00008a  4908              LDR      r1,|L3.172|
00008c  8008              STRH     r0,[r1,#0]
;;;182    				memset((uint8_t*)&TxData, 0, sizeof(DataTypedef));
00008e  f24071d2          MOV      r1,#0x7d2
000092  4809              LDR      r0,|L3.184|
000094  f7fffffe          BL       __aeabi_memclr
000098  e004              B        |L3.164|
                  |L3.154|
;;;183    			}
;;;184    			else
;;;185    			{
;;;186    				FramelenTx -= 64;
00009a  4804              LDR      r0,|L3.172|
00009c  8800              LDRH     r0,[r0,#0]  ; FramelenTx
00009e  3840              SUBS     r0,r0,#0x40
0000a0  4902              LDR      r1,|L3.172|
0000a2  8008              STRH     r0,[r1,#0]
                  |L3.164|
;;;187    			}
;;;188    		}
;;;189        }  
;;;190    }
0000a4  bd10              POP      {r4,pc}
;;;191    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L3.168|
                          DCD      bDeviceState
                  |L3.172|
                          DCD      FramelenTx
                  |L3.176|
                          DCD      Comm_RequestTX
                  |L3.180|
                          DCD      Txdata
                  |L3.184|
                          DCD      TxData
                  |L3.188|
                          DCD      TxLen

                          AREA ||i.TIM2_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM2_IRQHandler PROC
;;;81     /******************************************************************************/
;;;82     void TIM2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;83     {
000002  f5ad6dfb          SUB      sp,sp,#0x7d8
;;;84     	DataTypedef Rxdata;
;;;85     	uint16_t crcCal;
;;;86     
;;;87     	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)
000006  2101              MOVS     r1,#1
000008  0788              LSLS     r0,r1,#30
00000a  f7fffffe          BL       TIM_GetITStatus
00000e  2800              CMP      r0,#0
000010  d044              BEQ      |L4.156|
;;;88     	{
;;;89     		TIM_Cmd(TIM2, DISABLE);
000012  2100              MOVS     r1,#0
000014  f04f4080          MOV      r0,#0x40000000
000018  f7fffffe          BL       TIM_Cmd
;;;90     		if(Framelen!=0)
00001c  4821              LDR      r0,|L4.164|
00001e  8800              LDRH     r0,[r0,#0]  ; Framelen
000020  b3c0              CBZ      r0,|L4.148|
;;;91     		{
;;;92     			if((data[0]=='$')&&(data[Framelen-1]=='#'))
000022  4821              LDR      r0,|L4.168|
000024  7800              LDRB     r0,[r0,#0]  ; data
000026  2824              CMP      r0,#0x24
000028  d12c              BNE      |L4.132|
00002a  481e              LDR      r0,|L4.164|
00002c  8800              LDRH     r0,[r0,#0]  ; Framelen
00002e  1e40              SUBS     r0,r0,#1
000030  491d              LDR      r1,|L4.168|
000032  5c08              LDRB     r0,[r1,r0]
000034  2823              CMP      r0,#0x23
000036  d125              BNE      |L4.132|
;;;93     			{
;;;94     				/*将接收的数据生成crc校验码*/
;;;95     				crcCal = Common_CalculateCRC(&data[1], *(uint16_t*)&data[1]-2, 0xFFFF, 0x0000);
000038  4608              MOV      r0,r1
00003a  f8b00001          LDRH     r0,[r0,#1]  ; data
00003e  1e81              SUBS     r1,r0,#2
000040  2300              MOVS     r3,#0
000042  f64f72ff          MOV      r2,#0xffff
000046  4818              LDR      r0,|L4.168|
000048  1c40              ADDS     r0,r0,#1
00004a  f7fffffe          BL       Common_CalculateCRC
00004e  4604              MOV      r4,r0
;;;96     				/*进行校验码核对*/
;;;97     				if(crcCal==*(uint16_t*)&data[*(uint16_t*)&data[1]+2-3])
000050  4815              LDR      r0,|L4.168|
000052  f8b00001          LDRH     r0,[r0,#1]  ; data
000056  1e40              SUBS     r0,r0,#1
000058  4913              LDR      r1,|L4.168|
00005a  5a08              LDRH     r0,[r1,r0]
00005c  42a0              CMP      r0,r4
00005e  d111              BNE      |L4.132|
;;;98     				{
;;;99     					Rxdata.len=*(uint16_t*)&data[1]-4;
000060  4608              MOV      r0,r1
000062  f8b00001          LDRH     r0,[r0,#1]  ; data
000066  1f00              SUBS     r0,r0,#4
000068  b280              UXTH     r0,r0
00006a  f8ad0004          STRH     r0,[sp,#4]
;;;100    					memcpy(Rxdata.Data,&data[3],Rxdata.len);
00006e  f8bd2004          LDRH     r2,[sp,#4]
000072  1cc9              ADDS     r1,r1,#3
000074  f10d0006          ADD      r0,sp,#6
000078  f7fffffe          BL       __aeabi_memcpy
;;;101    					Comm_FIFO_RxDataPut(&Rxdata,&RxDataFIFO);
00007c  490b              LDR      r1,|L4.172|
00007e  a801              ADD      r0,sp,#4
000080  f7fffffe          BL       Comm_FIFO_RxDataPut
                  |L4.132|
;;;102    				}
;;;103    			}		
;;;104    			memset(data, 0, Framelen);
000084  4807              LDR      r0,|L4.164|
000086  8801              LDRH     r1,[r0,#0]  ; Framelen
000088  4807              LDR      r0,|L4.168|
00008a  f7fffffe          BL       __aeabi_memclr
;;;105    			Framelen=0;
00008e  2000              MOVS     r0,#0
000090  4904              LDR      r1,|L4.164|
000092  8008              STRH     r0,[r1,#0]
                  |L4.148|
;;;106    		}
;;;107    		else
;;;108    		{
;;;109    
;;;110    		}
;;;111    
;;;112    		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
000094  2101              MOVS     r1,#1
000096  0788              LSLS     r0,r1,#30
000098  f7fffffe          BL       TIM_ClearITPendingBit
                  |L4.156|
;;;113    	}
;;;114    }
00009c  f50d6dfb          ADD      sp,sp,#0x7d8
0000a0  bd10              POP      {r4,pc}
;;;115    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L4.164|
                          DCD      Framelen
                  |L4.168|
                          DCD      data
                  |L4.172|
                          DCD      RxDataFIFO

                          AREA ||i.TimeOut_Reload||, CODE, READONLY, ALIGN=1

                  TimeOut_Reload PROC
;;;74     
;;;75     void TimeOut_Reload(void)
000000  2009              MOVS     r0,#9
;;;76     {
;;;77     	/* 向下计数模式,装载TIMx->CNT值 */
;;;78     	TIM2->CNT = TIM_CNT_RELOAD;
000002  0781              LSLS     r1,r0,#30
000004  8488              STRH     r0,[r1,#0x24]
;;;79     }
000006  4770              BX       lr
;;;80     
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  data
                          %        1024
                  Txdata
                          %        1024

                          AREA ||.data||, DATA, ALIGN=2

                  txFlg
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  FrameCount
                          DCD      0x00000000
                  Framelen
000008  0000              DCW      0x0000
                  FramelenTx
00000a  0000              DCW      0x0000
                  TxLen
00000c  0000              DCW      0x0000
