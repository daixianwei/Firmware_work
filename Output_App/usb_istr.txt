; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\Output_App\usb_istr.o --asm_dir=..\Output_App\ --list_dir=..\Output_App\ --depend=..\Output_App\usb_istr.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I.\System\CM3 -I.\System\FWlib\inc -I.\System\Startup -I.\ISR -I.\Main -I.\Management\DisplayDriver -I.\Management\HumanInput -I.\Management\Interface -I.\Management\RotationMotor -I.\Management\ScanMotor -I.\Management\Common_CRC -I.\Management\QRCode -I.\Management\SystemManage_RTC -I.\Management\SignalProcess_Sample -I.\USB -I.\USB\comm -I.\USB\lib -I.\USB\src -I.\USB\USB_Communication -ID:\Keil4.0\ARM\RV31\Inc -ID:\Keil4.0\ARM\CMSIS\Include -ID:\Keil4.0\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DUSE_STM3210E_EVAL -W --omf_browse=..\Output_App\usb_istr.crf USB\src\usb_istr.c]
                          THUMB

                          AREA ||i.USB_Istr||, CODE, READONLY, ALIGN=2

                  USB_Istr PROC
;;;76     *******************************************************************************/
;;;77     void USB_Istr(void)
000000  b510              PUSH     {r4,lr}
;;;78     {
000002  b088              SUB      sp,sp,#0x20
;;;79         uint32_t i=0;
000004  2400              MOVS     r4,#0
;;;80      __IO uint32_t EP[8];
;;;81       
;;;82       wIstr = _GetISTR();
000006  4866              LDR      r0,|L1.416|
000008  6800              LDR      r0,[r0,#0]
00000a  4966              LDR      r1,|L1.420|
00000c  8008              STRH     r0,[r1,#0]
;;;83     
;;;84     #if (IMR_MSK & ISTR_SOF)
;;;85       if (wIstr & ISTR_SOF & wInterrupt_Mask)
00000e  4608              MOV      r0,r1
000010  8800              LDRH     r0,[r0,#0]  ; wIstr
000012  f4007000          AND      r0,r0,#0x200
000016  4964              LDR      r1,|L1.424|
000018  8809              LDRH     r1,[r1,#0]  ; wInterrupt_Mask
00001a  4208              TST      r0,r1
00001c  d00a              BEQ      |L1.52|
;;;86       {
;;;87         _SetISTR((uint16_t)CLR_SOF);
00001e  f64f50ff          MOV      r0,#0xfdff
000022  495f              LDR      r1,|L1.416|
000024  6008              STR      r0,[r1,#0]
;;;88         bIntPackSOF++;
000026  4861              LDR      r0,|L1.428|
000028  7800              LDRB     r0,[r0,#0]  ; bIntPackSOF
00002a  1c40              ADDS     r0,r0,#1
00002c  495f              LDR      r1,|L1.428|
00002e  7008              STRB     r0,[r1,#0]
;;;89     
;;;90     #ifdef SOF_CALLBACK
;;;91         SOF_Callback();
000030  f7fffffe          BL       SOF_Callback
                  |L1.52|
;;;92     #endif
;;;93       }
;;;94     #endif
;;;95       /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
;;;96       
;;;97     #if (IMR_MSK & ISTR_CTR)
;;;98       if (wIstr & ISTR_CTR & wInterrupt_Mask)
000034  485b              LDR      r0,|L1.420|
000036  8800              LDRH     r0,[r0,#0]  ; wIstr
000038  f4004000          AND      r0,r0,#0x8000
00003c  495a              LDR      r1,|L1.424|
00003e  8809              LDRH     r1,[r1,#0]  ; wInterrupt_Mask
000040  4208              TST      r0,r1
000042  d001              BEQ      |L1.72|
;;;99       {
;;;100        /* servicing of the endpoint correct transfer interrupt */
;;;101        /* clear of the CTR flag into the sub */
;;;102        CTR_LP();
000044  f7fffffe          BL       CTR_LP
                  |L1.72|
;;;103    #ifdef CTR_CALLBACK
;;;104        CTR_Callback();
;;;105    #endif
;;;106      }
;;;107    #endif
;;;108      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
;;;109    #if (IMR_MSK & ISTR_RESET)
;;;110      if (wIstr & ISTR_RESET & wInterrupt_Mask)
000048  4856              LDR      r0,|L1.420|
00004a  8800              LDRH     r0,[r0,#0]  ; wIstr
00004c  f4006080          AND      r0,r0,#0x400
000050  4955              LDR      r1,|L1.424|
000052  8809              LDRH     r1,[r1,#0]  ; wInterrupt_Mask
000054  4208              TST      r0,r1
000056  d006              BEQ      |L1.102|
;;;111      {
;;;112        _SetISTR((uint16_t)CLR_RESET);
000058  f64f30ff          MOV      r0,#0xfbff
00005c  4950              LDR      r1,|L1.416|
00005e  6008              STR      r0,[r1,#0]
;;;113        Device_Property.Reset();
000060  4953              LDR      r1,|L1.432|
000062  6848              LDR      r0,[r1,#4]  ; Device_Property
000064  4780              BLX      r0
                  |L1.102|
;;;114    #ifdef RESET_CALLBACK
;;;115        RESET_Callback();
;;;116    #endif
;;;117      }
;;;118    #endif
;;;119      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;120    #if (IMR_MSK & ISTR_DOVR)
;;;121      if (wIstr & ISTR_DOVR & wInterrupt_Mask)
;;;122      {
;;;123        _SetISTR((uint16_t)CLR_DOVR);
;;;124    #ifdef DOVR_CALLBACK
;;;125        DOVR_Callback();
;;;126    #endif
;;;127      }
;;;128    #endif
;;;129      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;130    #if (IMR_MSK & ISTR_ERR)
;;;131      if (wIstr & ISTR_ERR & wInterrupt_Mask)
000066  484f              LDR      r0,|L1.420|
000068  8800              LDRH     r0,[r0,#0]  ; wIstr
00006a  f4005000          AND      r0,r0,#0x2000
00006e  494e              LDR      r1,|L1.424|
000070  8809              LDRH     r1,[r1,#0]  ; wInterrupt_Mask
000072  4208              TST      r0,r1
000074  d003              BEQ      |L1.126|
;;;132      {
;;;133        _SetISTR((uint16_t)CLR_ERR);
000076  f64d70ff          MOV      r0,#0xdfff
00007a  4949              LDR      r1,|L1.416|
00007c  6008              STR      r0,[r1,#0]
                  |L1.126|
;;;134    #ifdef ERR_CALLBACK
;;;135        ERR_Callback();
;;;136    #endif
;;;137      }
;;;138    #endif
;;;139      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;140    #if (IMR_MSK & ISTR_WKUP)
;;;141      if (wIstr & ISTR_WKUP & wInterrupt_Mask)
00007e  4849              LDR      r0,|L1.420|
000080  8800              LDRH     r0,[r0,#0]  ; wIstr
000082  f4005080          AND      r0,r0,#0x1000
000086  4948              LDR      r1,|L1.424|
000088  8809              LDRH     r1,[r1,#0]  ; wInterrupt_Mask
00008a  4208              TST      r0,r1
00008c  d006              BEQ      |L1.156|
;;;142      {
;;;143        _SetISTR((uint16_t)CLR_WKUP);
00008e  f64e70ff          MOV      r0,#0xefff
000092  4943              LDR      r1,|L1.416|
000094  6008              STR      r0,[r1,#0]
;;;144        Resume(RESUME_EXTERNAL);
000096  2000              MOVS     r0,#0
000098  f7fffffe          BL       Resume
                  |L1.156|
;;;145    #ifdef WKUP_CALLBACK
;;;146        WKUP_Callback();
;;;147    #endif
;;;148      }
;;;149    #endif
;;;150      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;151    #if (IMR_MSK & ISTR_SUSP)
;;;152      if (wIstr & ISTR_SUSP & wInterrupt_Mask)
00009c  4841              LDR      r0,|L1.420|
00009e  8800              LDRH     r0,[r0,#0]  ; wIstr
0000a0  f4006000          AND      r0,r0,#0x800
0000a4  4940              LDR      r1,|L1.424|
0000a6  8809              LDRH     r1,[r1,#0]  ; wInterrupt_Mask
0000a8  4208              TST      r0,r1
0000aa  d00c              BEQ      |L1.198|
;;;153      {
;;;154    
;;;155        /* check if SUSPEND is possible */
;;;156        if (fSuspendEnabled)
0000ac  4841              LDR      r0,|L1.436|
0000ae  7800              LDRB     r0,[r0,#0]  ; fSuspendEnabled
0000b0  b110              CBZ      r0,|L1.184|
;;;157        {
;;;158          Suspend();
0000b2  f7fffffe          BL       Suspend
0000b6  e002              B        |L1.190|
                  |L1.184|
;;;159        }
;;;160        else
;;;161        {
;;;162          /* if not possible then resume after xx ms */
;;;163          Resume(RESUME_LATER);
0000b8  2002              MOVS     r0,#2
0000ba  f7fffffe          BL       Resume
                  |L1.190|
;;;164        }
;;;165        /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
;;;166        _SetISTR((uint16_t)CLR_SUSP);
0000be  f24f70ff          MOV      r0,#0xf7ff
0000c2  4937              LDR      r1,|L1.416|
0000c4  6008              STR      r0,[r1,#0]
                  |L1.198|
;;;167    #ifdef SUSP_CALLBACK
;;;168        SUSP_Callback();
;;;169    #endif
;;;170      }
;;;171    #endif
;;;172      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;173    
;;;174    #if (IMR_MSK & ISTR_ESOF)
;;;175      if (wIstr & ISTR_ESOF & wInterrupt_Mask)
0000c6  4837              LDR      r0,|L1.420|
0000c8  8800              LDRH     r0,[r0,#0]  ; wIstr
0000ca  f4007080          AND      r0,r0,#0x100
0000ce  4936              LDR      r1,|L1.424|
0000d0  8809              LDRH     r1,[r1,#0]  ; wInterrupt_Mask
0000d2  4208              TST      r0,r1
0000d4  d061              BEQ      |L1.410|
;;;176      {
;;;177        /* clear ESOF flag in ISTR */
;;;178        _SetISTR((uint16_t)CLR_ESOF);
0000d6  f64f60ff          MOV      r0,#0xfeff
0000da  4931              LDR      r1,|L1.416|
0000dc  6008              STR      r0,[r1,#0]
;;;179        
;;;180        if ((_GetFNR()&FNR_RXDP)!=0)
0000de  1d08              ADDS     r0,r1,#4
0000e0  6800              LDR      r0,[r0,#0]
0000e2  f4104f00          TST      r0,#0x8000
0000e6  d052              BEQ      |L1.398|
;;;181        {
;;;182          /* increment ESOF counter */
;;;183          esof_counter ++;
0000e8  4833              LDR      r0,|L1.440|
0000ea  6800              LDR      r0,[r0,#0]  ; esof_counter
0000ec  1c40              ADDS     r0,r0,#1
0000ee  4932              LDR      r1,|L1.440|
0000f0  6008              STR      r0,[r1,#0]  ; esof_counter
;;;184          
;;;185          /* test if we enter in ESOF more than 3 times with FSUSP =0 and RXDP =1=>> possible missing SUSP flag*/
;;;186          if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
0000f2  4608              MOV      r0,r1
0000f4  6800              LDR      r0,[r0,#0]  ; esof_counter
0000f6  2803              CMP      r0,#3
0000f8  d94c              BLS      |L1.404|
0000fa  4829              LDR      r0,|L1.416|
0000fc  1f00              SUBS     r0,r0,#4
0000fe  6800              LDR      r0,[r0,#0]
000100  f0100f08          TST      r0,#8
000104  d146              BNE      |L1.404|
;;;187          {           
;;;188            /* this a sequence to apply a force RESET*/
;;;189          
;;;190            /*Store CNTR value */
;;;191            wCNTR = _GetCNTR(); 
000106  4826              LDR      r0,|L1.416|
000108  1f00              SUBS     r0,r0,#4
00010a  6800              LDR      r0,[r0,#0]
00010c  b280              UXTH     r0,r0
00010e  492b              LDR      r1,|L1.444|
000110  6008              STR      r0,[r1,#0]  ; wCNTR
;;;192          
;;;193            /*Store endpoints registers status */
;;;194            for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
000112  2400              MOVS     r4,#0
000114  e007              B        |L1.294|
                  |L1.278|
000116  4822              LDR      r0,|L1.416|
000118  3844              SUBS     r0,r0,#0x44
00011a  f8500024          LDR      r0,[r0,r4,LSL #2]
00011e  b280              UXTH     r0,r0
000120  f84d0024          STR      r0,[sp,r4,LSL #2]
000124  1c64              ADDS     r4,r4,#1
                  |L1.294|
000126  2c08              CMP      r4,#8
000128  d3f5              BCC      |L1.278|
;;;195          
;;;196            /*apply FRES */
;;;197            wCNTR|=CNTR_FRES;
00012a  4824              LDR      r0,|L1.444|
00012c  6800              LDR      r0,[r0,#0]  ; wCNTR
00012e  f0400001          ORR      r0,r0,#1
000132  4922              LDR      r1,|L1.444|
000134  6008              STR      r0,[r1,#0]  ; wCNTR
;;;198            _SetCNTR(wCNTR);
000136  4608              MOV      r0,r1
000138  6800              LDR      r0,[r0,#0]  ; wCNTR
00013a  b280              UXTH     r0,r0
00013c  4918              LDR      r1,|L1.416|
00013e  1f09              SUBS     r1,r1,#4
000140  6008              STR      r0,[r1,#0]
;;;199     
;;;200            /*clear FRES*/
;;;201            wCNTR&=~CNTR_FRES;
000142  481e              LDR      r0,|L1.444|
000144  6800              LDR      r0,[r0,#0]  ; wCNTR
000146  f0200001          BIC      r0,r0,#1
00014a  491c              LDR      r1,|L1.444|
00014c  6008              STR      r0,[r1,#0]  ; wCNTR
;;;202            _SetCNTR(wCNTR);
00014e  4608              MOV      r0,r1
000150  6800              LDR      r0,[r0,#0]  ; wCNTR
000152  b280              UXTH     r0,r0
000154  4912              LDR      r1,|L1.416|
000156  1f09              SUBS     r1,r1,#4
000158  6008              STR      r0,[r1,#0]
;;;203          
;;;204            /*poll for RESET flag in ISTR*/
;;;205            while((_GetISTR()&ISTR_RESET) == 0);
00015a  bf00              NOP      
                  |L1.348|
00015c  4810              LDR      r0,|L1.416|
00015e  6800              LDR      r0,[r0,#0]
000160  f4106f80          TST      r0,#0x400
000164  d0fa              BEQ      |L1.348|
;;;206      
;;;207            /* clear RESET flag in ISTR */
;;;208            _SetISTR((uint16_t)CLR_RESET);
000166  f64f30ff          MOV      r0,#0xfbff
00016a  490d              LDR      r1,|L1.416|
00016c  6008              STR      r0,[r1,#0]
;;;209       
;;;210           /*restore Enpoints*/
;;;211            for (i=0;i<8;i++)
00016e  2400              MOVS     r4,#0
000170  e007              B        |L1.386|
                  |L1.370|
;;;212            _SetENDPOINT(i, EP[i]);
000172  f85d0024          LDR      r0,[sp,r4,LSL #2]
000176  b280              UXTH     r0,r0
000178  4909              LDR      r1,|L1.416|
00017a  3944              SUBS     r1,r1,#0x44
00017c  f8410024          STR      r0,[r1,r4,LSL #2]
000180  1c64              ADDS     r4,r4,#1              ;211
                  |L1.386|
000182  2c08              CMP      r4,#8                 ;211
000184  d3f5              BCC      |L1.370|
;;;213          
;;;214            esof_counter = 0;
000186  2000              MOVS     r0,#0
000188  490b              LDR      r1,|L1.440|
00018a  6008              STR      r0,[r1,#0]  ; esof_counter
00018c  e002              B        |L1.404|
                  |L1.398|
;;;215          }
;;;216        }
;;;217        else
;;;218        {
;;;219            esof_counter = 0;
00018e  2000              MOVS     r0,#0
000190  4909              LDR      r1,|L1.440|
000192  6008              STR      r0,[r1,#0]  ; esof_counter
                  |L1.404|
;;;220        }
;;;221        
;;;222        /* resume handling timing is made with ESOFs */
;;;223        Resume(RESUME_ESOF); /* request without change of the machine state */
000194  2007              MOVS     r0,#7
000196  f7fffffe          BL       Resume
                  |L1.410|
;;;224    
;;;225    #ifdef ESOF_CALLBACK
;;;226        ESOF_Callback();
;;;227    #endif
;;;228      }
;;;229    #endif
;;;230    } /* USB_Istr */
00019a  b008              ADD      sp,sp,#0x20
00019c  bd10              POP      {r4,pc}
;;;231    
                          ENDP

00019e  0000              DCW      0x0000
                  |L1.416|
                          DCD      0x40005c44
                  |L1.420|
                          DCD      wIstr
                  |L1.424|
                          DCD      wInterrupt_Mask
                  |L1.428|
                          DCD      bIntPackSOF
                  |L1.432|
                          DCD      Device_Property
                  |L1.436|
                          DCD      fSuspendEnabled
                  |L1.440|
                          DCD      esof_counter
                  |L1.444|
                          DCD      wCNTR

                          AREA ||.data||, DATA, ALIGN=2

                  bIntPackSOF
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  esof_counter
                          DCD      0x00000000
                  wCNTR
                          DCD      0x00000000
                  pEpInt_IN
                          DCD      EP1_IN_Callback
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                  pEpInt_OUT
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      EP3_OUT_Callback
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                  wIstr
000044  0000              DCB      0x00,0x00
