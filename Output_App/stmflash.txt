; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\Output_App\stmflash.o --asm_dir=..\Output_App\ --list_dir=..\Output_App\ --depend=..\Output_App\stmflash.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I.\System\CM3 -I.\System\FWlib\inc -I.\System\Startup -I.\ISR -I.\Main -I.\Management\DisplayDriver -I.\Management\HumanInput -I.\Management\Interface -I.\Management\RotationMotor -I.\Management\ScanMotor -I.\Management\Common_CRC -I.\Management\QRCode -I.\Management\SystemManage_RTC -I.\Management\SignalProcess_Sample -I.\USB -I.\USB\comm -I.\USB\lib -I.\USB\src -I.\USB\USB_Communication -ID:\Keil4.0\ARM\RV31\Inc -ID:\Keil4.0\ARM\CMSIS\Include -ID:\Keil4.0\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DUSE_STM3210E_EVAL -W --omf_browse=..\Output_App\stmflash.crf USB\USB_Communication\stmflash.c]
                          THUMB

                          AREA ||i.STMFlash_Read||, CODE, READONLY, ALIGN=1

                  STMFlash_Read PROC
;;;108    /******************************************************************************/
;;;109    void STMFlash_Read(uint32 ReadAddr, uint16 *pBuffer, uint16 NumToRead)
000000  b530              PUSH     {r4,r5,lr}
;;;110    {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;111    	uint16 i;
;;;112    
;;;113    	for(i = 0; i < NumToRead; i++)
000008  2200              MOVS     r2,#0
00000a  e007              B        |L1.28|
                  |L1.12|
;;;114    	{
;;;115    		pBuffer[i] = STMFlash_ReadHalfWord(ReadAddr);
00000c  4618              MOV      r0,r3
00000e  f7fffffe          BL       STMFlash_ReadHalfWord
000012  f8240012          STRH     r0,[r4,r2,LSL #1]
;;;116    		ReadAddr += 2;
000016  1c9b              ADDS     r3,r3,#2
000018  1c50              ADDS     r0,r2,#1              ;113
00001a  b282              UXTH     r2,r0                 ;113
                  |L1.28|
00001c  42aa              CMP      r2,r5                 ;113
00001e  dbf5              BLT      |L1.12|
;;;117    	}
;;;118    }
000020  bd30              POP      {r4,r5,pc}
;;;119    
                          ENDP


                          AREA ||i.STMFlash_ReadHalfWord||, CODE, READONLY, ALIGN=1

                  STMFlash_ReadHalfWord PROC
;;;26     /******************************************************************************/
;;;27     uint16 STMFlash_ReadHalfWord(uint32 faddr)
000000  4601              MOV      r1,r0
;;;28     {
;;;29     	return *(volatile uint16*)faddr;
000002  8808              LDRH     r0,[r1,#0]
;;;30     }
000004  4770              BX       lr
;;;31     
                          ENDP


                          AREA ||i.STMFlash_Write||, CODE, READONLY, ALIGN=2

                  STMFlash_Write PROC
;;;44     /******************************************************************************/
;;;45     void STMFlash_Write(uint32 WriteAddr, uint16 *pBuffer, uint16 NumToWrite)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;46     {
000004  4680              MOV      r8,r0
000006  468a              MOV      r10,r1
000008  4617              MOV      r7,r2
;;;47     	uint32 secpos;
;;;48     	uint16 secoff;
;;;49     	uint16 secremain;
;;;50      	uint16 i;
;;;51     	uint32 offaddr;
;;;52     
;;;53     	if(WriteAddr < FLASH_BASE ||
00000a  f1b86f00          CMP      r8,#0x8000000
00000e  d302              BCC      |L3.22|
;;;54     			(WriteAddr >= (FLASH_BASE + (STM32_FLASH_SIZE << 10))))
000010  4833              LDR      r0,|L3.224|
000012  4580              CMP      r8,r0
000014  d301              BCC      |L3.26|
                  |L3.22|
;;;55     		return;
;;;56     
;;;57     	FLASH_Unlock();
;;;58     	offaddr = WriteAddr - FLASH_BASE;
;;;59     	secpos = offaddr / STM_SECTOR_SIZE;
;;;60     	secoff = (offaddr % STM_SECTOR_SIZE) >> 1;
;;;61     	secremain = (STM_SECTOR_SIZE >> 1) - secoff;
;;;62     
;;;63     	if(NumToWrite <= secremain)
;;;64     		secremain = NumToWrite;
;;;65     
;;;66     	while(1) 
;;;67     	{	
;;;68     		STMFlash_Read(secpos * STM_SECTOR_SIZE + FLASH_BASE, flashTmpBuffer,
;;;69     				STM_SECTOR_SIZE >> 1);
;;;70     		for(i=0; i < secremain; i++)
;;;71     		{
;;;72     			if(flashTmpBuffer[secoff + i] != 0XFFFF)
;;;73     				break;
;;;74     		}
;;;75     
;;;76     		if(i < secremain)
;;;77     		{
;;;78     			FLASH_ErasePage(secpos * STM_SECTOR_SIZE + FLASH_BASE);
;;;79     			for(i = 0; i < secremain; i++)
;;;80     			{
;;;81     				flashTmpBuffer[i + secoff] = pBuffer[i];
;;;82     			}
;;;83     
;;;84     			STMFlash_Write_NoCheck(secpos * STM_SECTOR_SIZE + FLASH_BASE,
;;;85     					flashTmpBuffer, STM_SECTOR_SIZE >> 1);
;;;86     		}else
;;;87     			STMFlash_Write_NoCheck(WriteAddr, pBuffer, secremain);
;;;88     
;;;89     		if(NumToWrite == secremain)
;;;90     			break;
;;;91     		else
;;;92     		{
;;;93     			secpos++;
;;;94     			secoff = 0;
;;;95     		   	pBuffer += secremain;
;;;96     			WriteAddr += secremain;
;;;97     		   	NumToWrite -= secremain;
;;;98     			if(NumToWrite > (STM_SECTOR_SIZE >> 1))
;;;99     				secremain = STM_SECTOR_SIZE >> 1;
;;;100    			else
;;;101    				secremain = NumToWrite;
;;;102    		}	 
;;;103    	};
;;;104    
;;;105    	FLASH_Lock();
;;;106    }
000016  e8bd9ff0          POP      {r4-r12,pc}
                  |L3.26|
00001a  f7fffffe          BL       FLASH_Unlock
00001e  f1a86b00          SUB      r11,r8,#0x8000000     ;58
000022  ea4f25db          LSR      r5,r11,#11            ;59
000026  f3cb0949          UBFX     r9,r11,#1,#10         ;60
00002a  f5c96480          RSB      r4,r9,#0x400          ;61
00002e  42a7              CMP      r7,r4                 ;63
000030  dc00              BGT      |L3.52|
000032  463c              MOV      r4,r7                 ;64
                  |L3.52|
000034  e04d              B        |L3.210|
                  |L3.54|
000036  f04f6100          MOV      r1,#0x8000000         ;68
00003a  eb0120c5          ADD      r0,r1,r5,LSL #11      ;68
00003e  144a              ASRS     r2,r1,#17             ;68
000040  4928              LDR      r1,|L3.228|
000042  f7fffffe          BL       STMFlash_Read
000046  2600              MOVS     r6,#0                 ;70
000048  e00b              B        |L3.98|
                  |L3.74|
00004a  eb090006          ADD      r0,r9,r6              ;72
00004e  4925              LDR      r1,|L3.228|
000050  f8310010          LDRH     r0,[r1,r0,LSL #1]     ;72
000054  f5a0417f          SUB      r1,r0,#0xff00         ;72
000058  39ff              SUBS     r1,r1,#0xff           ;72
00005a  d000              BEQ      |L3.94|
00005c  e003              B        |L3.102|
                  |L3.94|
00005e  1c70              ADDS     r0,r6,#1              ;70
000060  b286              UXTH     r6,r0                 ;70
                  |L3.98|
000062  42a6              CMP      r6,r4                 ;70
000064  dbf1              BLT      |L3.74|
                  |L3.102|
000066  bf00              NOP                            ;73
000068  42a6              CMP      r6,r4                 ;76
00006a  da1b              BGE      |L3.164|
00006c  f04f6100          MOV      r1,#0x8000000         ;78
000070  eb0120c5          ADD      r0,r1,r5,LSL #11      ;78
000074  f7fffffe          BL       FLASH_ErasePage
000078  2600              MOVS     r6,#0                 ;79
00007a  e008              B        |L3.142|
                  |L3.124|
00007c  f83a0016          LDRH     r0,[r10,r6,LSL #1]    ;81
000080  eb060109          ADD      r1,r6,r9              ;81
000084  4a17              LDR      r2,|L3.228|
000086  f8220011          STRH     r0,[r2,r1,LSL #1]     ;81
00008a  1c70              ADDS     r0,r6,#1              ;79
00008c  b286              UXTH     r6,r0                 ;79
                  |L3.142|
00008e  42a6              CMP      r6,r4                 ;79
000090  dbf4              BLT      |L3.124|
000092  f04f6100          MOV      r1,#0x8000000         ;84
000096  eb0120c5          ADD      r0,r1,r5,LSL #11      ;84
00009a  144a              ASRS     r2,r1,#17             ;84
00009c  4911              LDR      r1,|L3.228|
00009e  f7fffffe          BL       STMFlash_Write_NoCheck
0000a2  e004              B        |L3.174|
                  |L3.164|
0000a4  4622              MOV      r2,r4                 ;87
0000a6  4651              MOV      r1,r10                ;87
0000a8  4640              MOV      r0,r8                 ;87
0000aa  f7fffffe          BL       STMFlash_Write_NoCheck
                  |L3.174|
0000ae  42a7              CMP      r7,r4                 ;89
0000b0  d100              BNE      |L3.180|
0000b2  e00f              B        |L3.212|
                  |L3.180|
0000b4  1c6d              ADDS     r5,r5,#1              ;93
0000b6  f04f0900          MOV      r9,#0                 ;94
0000ba  eb0a0a44          ADD      r10,r10,r4,LSL #1     ;95
0000be  44a0              ADD      r8,r8,r4              ;96
0000c0  1b38              SUBS     r0,r7,r4              ;97
0000c2  b287              UXTH     r7,r0                 ;97
0000c4  f5b76f80          CMP      r7,#0x400             ;98
0000c8  dd02              BLE      |L3.208|
0000ca  f44f6480          MOV      r4,#0x400             ;99
0000ce  e000              B        |L3.210|
                  |L3.208|
0000d0  463c              MOV      r4,r7                 ;101
                  |L3.210|
0000d2  e7b0              B        |L3.54|
                  |L3.212|
0000d4  bf00              NOP                            ;90
0000d6  f7fffffe          BL       FLASH_Lock
0000da  bf00              NOP      
0000dc  e79b              B        |L3.22|
;;;107    
                          ENDP

0000de  0000              DCW      0x0000
                  |L3.224|
                          DCD      0x08080000
                  |L3.228|
                          DCD      flashTmpBuffer

                          AREA ||i.STMFlash_Write_NoCheck||, CODE, READONLY, ALIGN=1

                  STMFlash_Write_NoCheck PROC
;;;32     /******************************************************************************/
;;;33     void STMFlash_Write_NoCheck(uint32 WriteAddr, uint16 *pBuffer,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;34     		uint16 NumToWrite)
;;;35     { 			 		 
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;36     	uint16 i;
;;;37     	for(i = 0; i < NumToWrite; i++)
00000a  2400              MOVS     r4,#0
00000c  e007              B        |L4.30|
                  |L4.14|
;;;38     	{
;;;39     		FLASH_ProgramHalfWord(WriteAddr, pBuffer[i]);
00000e  f8361014          LDRH     r1,[r6,r4,LSL #1]
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       FLASH_ProgramHalfWord
;;;40     	    WriteAddr += 2;
000018  1cad              ADDS     r5,r5,#2
00001a  1c60              ADDS     r0,r4,#1              ;37
00001c  b284              UXTH     r4,r0                 ;37
                  |L4.30|
00001e  42bc              CMP      r4,r7                 ;37
000020  dbf5              BLT      |L4.14|
;;;41     	}  
;;;42     } 
000022  e8bd81f0          POP      {r4-r8,pc}
;;;43     
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  flashTmpBuffer
                          %        2048
