; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\Output_App\displaydriver.o --asm_dir=..\Output_App\ --list_dir=..\Output_App\ --depend=..\Output_App\displaydriver.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I.\System\CM3 -I.\System\FWlib\inc -I.\System\Startup -I.\ISR -I.\Main -I.\Management\DisplayDriver -I.\Management\HumanInput -I.\Management\Interface -I.\Management\RotationMotor -I.\Management\ScanMotor -I.\Management\Common_CRC -I.\Management\QRCode -I.\Management\SystemManage_RTC -I.\Management\SignalProcess_Sample -I.\USB -I.\USB\comm -I.\USB\lib -I.\USB\src -I.\USB\USB_Communication -ID:\Keil4.0\ARM\RV31\Inc -ID:\Keil4.0\ARM\CMSIS\Include -ID:\Keil4.0\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DUSE_STM3210E_EVAL -W --omf_browse=..\Output_App\displaydriver.crf Management\DisplayDriver\DisplayDriver.c]
                          THUMB

                          AREA ||i.BlockWrite||, CODE, READONLY, ALIGN=1

                  BlockWrite PROC
;;;347    *******************************************************************************/
;;;348    void BlockWrite(unsigned int Xstart,unsigned int Xend,unsigned int Ystart,unsigned int Yend)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;349    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;350    	WriteComm(0x2a);
00000c  202a              MOVS     r0,#0x2a
00000e  f7fffffe          BL       WriteComm
;;;351    	WriteData(Xstart>>8);
000012  f3c4200f          UBFX     r0,r4,#8,#16
000016  f7fffffe          BL       WriteData
;;;352    	WriteData(Xstart&0xff);
00001a  b2e0              UXTB     r0,r4
00001c  f7fffffe          BL       WriteData
;;;353    	WriteData(Xend>>8);
000020  f3c5200f          UBFX     r0,r5,#8,#16
000024  f7fffffe          BL       WriteData
;;;354    	WriteData(Xend&0xff);
000028  b2e8              UXTB     r0,r5
00002a  f7fffffe          BL       WriteData
;;;355    
;;;356    	WriteComm(0x2b);
00002e  202b              MOVS     r0,#0x2b
000030  f7fffffe          BL       WriteComm
;;;357    	WriteData(Ystart>>8);
000034  f3c6200f          UBFX     r0,r6,#8,#16
000038  f7fffffe          BL       WriteData
;;;358    	WriteData(Ystart&0xff);
00003c  b2f0              UXTB     r0,r6
00003e  f7fffffe          BL       WriteData
;;;359    	WriteData(Yend>>8);
000042  f3c7200f          UBFX     r0,r7,#8,#16
000046  f7fffffe          BL       WriteData
;;;360    	WriteData(Yend&0xff);
00004a  b2f8              UXTB     r0,r7
00004c  f7fffffe          BL       WriteData
;;;361    
;;;362    	WriteComm(0x2c);
000050  202c              MOVS     r0,#0x2c
000052  f7fffffe          BL       WriteComm
;;;363    }
000056  e8bd81f0          POP      {r4-r8,pc}
;;;364    
                          ENDP


                          AREA ||i.BlockWrite_Test||, CODE, READONLY, ALIGN=1

                  BlockWrite_Test PROC
;;;376    *******************************************************************************/
;;;377    void BlockWrite_Test(unsigned int Xstart,unsigned int Ystart)
000000  b570              PUSH     {r4-r6,lr}
;;;378    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;379    	WriteComm(0x2a);
000006  202a              MOVS     r0,#0x2a
000008  f7fffffe          BL       WriteComm
;;;380    	WriteData(Xstart);
00000c  b2a0              UXTH     r0,r4
00000e  f7fffffe          BL       WriteData
;;;381    	WriteData(Xstart&0xff);
000012  b2e0              UXTB     r0,r4
000014  f7fffffe          BL       WriteData
;;;382    
;;;383    	WriteComm(0x2b);
000018  202b              MOVS     r0,#0x2b
00001a  f7fffffe          BL       WriteComm
;;;384    	WriteData(Ystart);
00001e  b2a8              UXTH     r0,r5
000020  f7fffffe          BL       WriteData
;;;385    	WriteData(Ystart&0xff);
000024  b2e8              UXTB     r0,r5
000026  f7fffffe          BL       WriteData
;;;386    
;;;387    	WriteComm(0x2c);
00002a  202c              MOVS     r0,#0x2c
00002c  f7fffffe          BL       WriteComm
;;;388    }
000030  bd70              POP      {r4-r6,pc}
;;;389    
                          ENDP


                          AREA ||i.Delay||, CODE, READONLY, ALIGN=1

                  Delay PROC
;;;150    *******************************************************************************/
;;;151    volatile static void Delay(__IO u32 nCount)
000000  2100              MOVS     r1,#0
;;;152    {
;;;153    	volatile int i;
;;;154    	for(i=0;i<7200;i++)
000002  e004              B        |L3.14|
                  |L3.4|
;;;155        for(; nCount != 0; nCount--);
000004  e000              B        |L3.8|
                  |L3.6|
000006  1e40              SUBS     r0,r0,#1
                  |L3.8|
000008  2800              CMP      r0,#0
00000a  d1fc              BNE      |L3.6|
00000c  1c49              ADDS     r1,r1,#1              ;154
                  |L3.14|
00000e  f5b15fe1          CMP      r1,#0x1c20            ;154
000012  dbf7              BLT      |L3.4|
;;;156    }
000014  4770              BX       lr
;;;157    
                          ENDP


                          AREA ||i.DisplayDriver_DrawPic||, CODE, READONLY, ALIGN=2

                  DisplayDriver_DrawPic PROC
;;;453    *******************************************************************************/
;;;454    void DisplayDriver_DrawPic(u16 x, u16 y,u16 pic_H, u16 pic_V, const unsigned char* pic)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;455    {
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
00000c  f8dd9020          LDR      r9,[sp,#0x20]
;;;456    	unsigned long i;
;;;457    	unsigned int j;
;;;458    
;;;459    	WriteComm(0x36); 					//Set_address_mode
000010  2036              MOVS     r0,#0x36
000012  f7fffffe          BL       WriteComm
;;;460    	WriteData(0xC0); 					//ÊúÆÁ
000016  20c0              MOVS     r0,#0xc0
000018  f7fffffe          BL       WriteData
;;;461    	BlockWrite(x,x+pic_H-1,y,y+pic_V-1);
00001c  19a0              ADDS     r0,r4,r6
00001e  1e43              SUBS     r3,r0,#1
000020  eb080005          ADD      r0,r8,r5
000024  1e41              SUBS     r1,r0,#1
000026  4622              MOV      r2,r4
000028  4640              MOV      r0,r8
00002a  f7fffffe          BL       BlockWrite
;;;462    	for (i = 0; i < pic_H*pic_V*2; i++)
00002e  2700              MOVS     r7,#0
000030  e004              B        |L4.60|
                  |L4.50|
;;;463    	{
;;;464    		*(__IO u16 *) (Bank1_LCD_D) = pic[i];
000032  f8190007          LDRB     r0,[r9,r7]
000036  4908              LDR      r1,|L4.88|
000038  8008              STRH     r0,[r1,#0]
00003a  1c7f              ADDS     r7,r7,#1              ;462
                  |L4.60|
00003c  fb05f006          MUL      r0,r5,r6              ;462
000040  ebb70f40          CMP      r7,r0,LSL #1          ;462
000044  d3f5              BCC      |L4.50|
;;;465    	}
;;;466    	WriteComm(0x36); 					//Set_address_mode
000046  2036              MOVS     r0,#0x36
000048  f7fffffe          BL       WriteComm
;;;467    	WriteData(0xC0);					//ºáÆÁ
00004c  20c0              MOVS     r0,#0xc0
00004e  f7fffffe          BL       WriteData
;;;468    }
000052  e8bd87f0          POP      {r4-r10,pc}
;;;469    
                          ENDP

000056  0000              DCW      0x0000
                  |L4.88|
                          DCD      0x60020000

                          AREA ||i.DisplayDriver_Init||, CODE, READONLY, ALIGN=2

                  DisplayDriver_Init PROC
;;;214    /******************************************************************************/
;;;215    void DisplayDriver_Init(void)
000000  b510              PUSH     {r4,lr}
;;;216    {
;;;217    int a;
;;;218    LCD_GPIO_Config();
000002  f7fffffe          BL       LCD_GPIO_Config
;;;219    LCD_FSMC_Config();
000006  f7fffffe          BL       LCD_FSMC_Config
;;;220    Delay(20);
00000a  2014              MOVS     r0,#0x14
00000c  f7fffffe          BL       Delay
;;;221    LCD_Rst();
000010  f7fffffe          BL       LCD_Rst
;;;222    //************* ILI9163C **********//
;;;223    WriteComm(0x11);				//Exit Sleep
000014  2011              MOVS     r0,#0x11
000016  f7fffffe          BL       WriteComm
;;;224    Delay(20);
00001a  2014              MOVS     r0,#0x14
00001c  f7fffffe          BL       Delay
;;;225    
;;;226    WriteComm(0x26); 				//Set Default Gamma
000020  2026              MOVS     r0,#0x26
000022  f7fffffe          BL       WriteComm
;;;227    WriteData(0x04);
000026  2004              MOVS     r0,#4
000028  f7fffffe          BL       WriteData
;;;228    
;;;229    WriteComm(0xB1);
00002c  20b1              MOVS     r0,#0xb1
00002e  f7fffffe          BL       WriteComm
;;;230    WriteData(0x08);
000032  2008              MOVS     r0,#8
000034  f7fffffe          BL       WriteData
;;;231    WriteData(0x10);
000038  2010              MOVS     r0,#0x10
00003a  f7fffffe          BL       WriteData
;;;232    
;;;233    WriteComm(0xC0); 				//Set VRH1[4:0] & VC[2:0] for VCI1 & GVDD
00003e  20c0              MOVS     r0,#0xc0
000040  f7fffffe          BL       WriteComm
;;;234    WriteData(0x02);
000044  2002              MOVS     r0,#2
000046  f7fffffe          BL       WriteData
;;;235    WriteData(0x00);
00004a  2000              MOVS     r0,#0
00004c  f7fffffe          BL       WriteData
;;;236    
;;;237    WriteComm(0xC1); 				//Set BT[2:0] for AVDD & VCL & VGH & VGL
000050  20c1              MOVS     r0,#0xc1
000052  f7fffffe          BL       WriteComm
;;;238    WriteData(0x02);
000056  2002              MOVS     r0,#2
000058  f7fffffe          BL       WriteData
;;;239    
;;;240    WriteComm(0xC5); 				//Set VMH[6:0] & VML[6:0] for VOMH & VCOML
00005c  20c5              MOVS     r0,#0xc5
00005e  f7fffffe          BL       WriteComm
;;;241    WriteData(0x4C);
000062  204c              MOVS     r0,#0x4c
000064  f7fffffe          BL       WriteData
;;;242    WriteData(0x5E);
000068  205e              MOVS     r0,#0x5e
00006a  f7fffffe          BL       WriteData
;;;243    
;;;244    WriteComm(0xC7);
00006e  20c7              MOVS     r0,#0xc7
000070  f7fffffe          BL       WriteComm
;;;245    WriteData(0x00);
000074  2000              MOVS     r0,#0
000076  f7fffffe          BL       WriteData
;;;246    
;;;247    WriteComm(0x3a); 				//Set Color Format
00007a  203a              MOVS     r0,#0x3a
00007c  f7fffffe          BL       WriteComm
;;;248    WriteData(0x05);
000080  2005              MOVS     r0,#5
000082  f7fffffe          BL       WriteData
;;;249    
;;;250    WriteComm(0x2A);				//Set Column Address
000086  202a              MOVS     r0,#0x2a
000088  f7fffffe          BL       WriteComm
;;;251    WriteData(0x00);
00008c  2000              MOVS     r0,#0
00008e  f7fffffe          BL       WriteData
;;;252    WriteData(0x00);
000092  2000              MOVS     r0,#0
000094  f7fffffe          BL       WriteData
;;;253    WriteData(0x00);
000098  2000              MOVS     r0,#0
00009a  f7fffffe          BL       WriteData
;;;254    WriteData(0x7F);
00009e  207f              MOVS     r0,#0x7f
0000a0  f7fffffe          BL       WriteData
;;;255    
;;;256    WriteComm(0x2B);				//Set Page Address
0000a4  202b              MOVS     r0,#0x2b
0000a6  f7fffffe          BL       WriteComm
;;;257    WriteData(0x00);
0000aa  2000              MOVS     r0,#0
0000ac  f7fffffe          BL       WriteData
;;;258    WriteData(0x00);
0000b0  2000              MOVS     r0,#0
0000b2  f7fffffe          BL       WriteData
;;;259    WriteData(0x00);
0000b6  2000              MOVS     r0,#0
0000b8  f7fffffe          BL       WriteData
;;;260    WriteData(0x9F);
0000bc  209f              MOVS     r0,#0x9f
0000be  f7fffffe          BL       WriteData
;;;261    
;;;262    WriteComm(0x36);				//Set Scanning Direction
0000c2  2036              MOVS     r0,#0x36
0000c4  f7fffffe          BL       WriteComm
;;;263    WriteData(0xC0);
0000c8  20c0              MOVS     r0,#0xc0
0000ca  f7fffffe          BL       WriteData
;;;264    
;;;265    WriteComm(0xB7);				//Set Source Output Direction
0000ce  20b7              MOVS     r0,#0xb7
0000d0  f7fffffe          BL       WriteComm
;;;266    WriteData(0x00);
0000d4  2000              MOVS     r0,#0
0000d6  f7fffffe          BL       WriteData
;;;267    
;;;268    WriteComm(0xf2);				//Enable Gamma bit
0000da  20f2              MOVS     r0,#0xf2
0000dc  f7fffffe          BL       WriteComm
;;;269    WriteData(0x01);
0000e0  2001              MOVS     r0,#1
0000e2  f7fffffe          BL       WriteData
;;;270    
;;;271    WriteComm(0xE0);
0000e6  20e0              MOVS     r0,#0xe0
0000e8  f7fffffe          BL       WriteComm
;;;272    WriteData(0x3F);				//p1
0000ec  203f              MOVS     r0,#0x3f
0000ee  f7fffffe          BL       WriteData
;;;273    WriteData(0x22);				//p2
0000f2  2022              MOVS     r0,#0x22
0000f4  f7fffffe          BL       WriteData
;;;274    WriteData(0x20);				//p3
0000f8  2020              MOVS     r0,#0x20
0000fa  f7fffffe          BL       WriteData
;;;275    WriteData(0x24);				//p4
0000fe  2024              MOVS     r0,#0x24
000100  f7fffffe          BL       WriteData
;;;276    WriteData(0x20);				//p5
000104  2020              MOVS     r0,#0x20
000106  f7fffffe          BL       WriteData
;;;277    WriteData(0x0C);				//p6
00010a  200c              MOVS     r0,#0xc
00010c  f7fffffe          BL       WriteData
;;;278    WriteData(0x4E);				//p7
000110  204e              MOVS     r0,#0x4e
000112  f7fffffe          BL       WriteData
;;;279    WriteData(0xB7);				//p8
000116  20b7              MOVS     r0,#0xb7
000118  f7fffffe          BL       WriteData
;;;280    WriteData(0x3C);				//p9
00011c  203c              MOVS     r0,#0x3c
00011e  f7fffffe          BL       WriteData
;;;281    WriteData(0x19);				//p10
000122  2019              MOVS     r0,#0x19
000124  f7fffffe          BL       WriteData
;;;282    WriteData(0x22);				//p11
000128  2022              MOVS     r0,#0x22
00012a  f7fffffe          BL       WriteData
;;;283    WriteData(0x1E);				//p12
00012e  201e              MOVS     r0,#0x1e
000130  f7fffffe          BL       WriteData
;;;284    WriteData(0x02);				//p13
000134  2002              MOVS     r0,#2
000136  f7fffffe          BL       WriteData
;;;285    WriteData(0x01);				//p14
00013a  2001              MOVS     r0,#1
00013c  f7fffffe          BL       WriteData
;;;286    WriteData(0x00);				//p15
000140  2000              MOVS     r0,#0
000142  f7fffffe          BL       WriteData
;;;287    
;;;288    WriteComm(0xE1);
000146  20e1              MOVS     r0,#0xe1
000148  f7fffffe          BL       WriteComm
;;;289    WriteData(0x00);				//p1
00014c  2000              MOVS     r0,#0
00014e  f7fffffe          BL       WriteData
;;;290    WriteData(0x1B);				//p2
000152  201b              MOVS     r0,#0x1b
000154  f7fffffe          BL       WriteData
;;;291    WriteData(0x1F);				//p3
000158  201f              MOVS     r0,#0x1f
00015a  f7fffffe          BL       WriteData
;;;292    WriteData(0x0B);				//p4
00015e  200b              MOVS     r0,#0xb
000160  f7fffffe          BL       WriteData
;;;293    WriteData(0x0F);				//p5
000164  200f              MOVS     r0,#0xf
000166  f7fffffe          BL       WriteData
;;;294    WriteData(0x13);				//p6
00016a  2013              MOVS     r0,#0x13
00016c  f7fffffe          BL       WriteData
;;;295    WriteData(0x31);				//p7
000170  2031              MOVS     r0,#0x31
000172  f7fffffe          BL       WriteData
;;;296    WriteData(0x84);				//p8
000176  2084              MOVS     r0,#0x84
000178  f7fffffe          BL       WriteData
;;;297    WriteData(0x43);				//p9
00017c  2043              MOVS     r0,#0x43
00017e  f7fffffe          BL       WriteData
;;;298    WriteData(0x06);				//p10
000182  2006              MOVS     r0,#6
000184  f7fffffe          BL       WriteData
;;;299    WriteData(0x1D);				//p11
000188  201d              MOVS     r0,#0x1d
00018a  f7fffffe          BL       WriteData
;;;300    WriteData(0x21);				//p12
00018e  2021              MOVS     r0,#0x21
000190  f7fffffe          BL       WriteData
;;;301    WriteData(0x3D);				//p13
000194  203d              MOVS     r0,#0x3d
000196  f7fffffe          BL       WriteData
;;;302    WriteData(0x3E);				//p14
00019a  203e              MOVS     r0,#0x3e
00019c  f7fffffe          BL       WriteData
;;;303    WriteData(0x3F);				//p15
0001a0  203f              MOVS     r0,#0x3f
0001a2  f7fffffe          BL       WriteData
;;;304    
;;;305    WriteComm(0x29);				// Display On
0001a6  2029              MOVS     r0,#0x29
0001a8  f7fffffe          BL       WriteComm
;;;306    //Lcd_Light_ON;
;;;307    
;;;308    	Delay_ms_SW(2000);
0001ac  f44f60fa          MOV      r0,#0x7d0
0001b0  f7fffffe          BL       Delay_ms_SW
;;;309        if(GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_4))
0001b4  2110              MOVS     r1,#0x10
0001b6  4804              LDR      r0,|L5.456|
0001b8  f7fffffe          BL       GPIO_ReadInputDataBit
0001bc  b118              CBZ      r0,|L5.454|
;;;310        {
;;;311        	GPIO_SetBits(GPIOB, GPIO_Pin_3);
0001be  2108              MOVS     r1,#8
0001c0  4801              LDR      r0,|L5.456|
0001c2  f7fffffe          BL       GPIO_SetBits
                  |L5.454|
;;;312        }
;;;313    }
0001c6  bd10              POP      {r4,pc}
;;;314    
                          ENDP

                  |L5.456|
                          DCD      0x40010c00

                          AREA ||i.DrawPixel||, CODE, READONLY, ALIGN=2

                  DrawPixel PROC
;;;470    /******************************************************************************/
;;;471    void DrawPixel(u16 x, u16 y, u16 Color)
000000  b570              PUSH     {r4-r6,lr}
;;;472    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;473    	BlockWrite(x,x+1,y,y+1);
000008  1c63              ADDS     r3,r4,#1
00000a  4622              MOV      r2,r4
00000c  1c71              ADDS     r1,r6,#1
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       BlockWrite
;;;474    	*(__IO u16 *) (Bank1_LCD_D) = Color;
000014  4801              LDR      r0,|L6.28|
000016  8005              STRH     r5,[r0,#0]
;;;475    }
000018  bd70              POP      {r4-r6,pc}
;;;476    
                          ENDP

00001a  0000              DCW      0x0000
                  |L6.28|
                          DCD      0x60020000

                          AREA ||i.LCD_FSMC_Config||, CODE, READONLY, ALIGN=1

                  LCD_FSMC_Config PROC
;;;107    *******************************************************************************/
;;;108    static void LCD_FSMC_Config(void)
000000  b500              PUSH     {lr}
;;;109    {
000002  b097              SUB      sp,sp,#0x5c
;;;110        FSMC_NORSRAMInitTypeDef  FSMC_NORSRAMInitStructure;
;;;111        FSMC_NORSRAMTimingInitTypeDef  p;
;;;112    
;;;113    
;;;114        p.FSMC_AddressSetupTime = 0x02;	 		//µØÖ·½¨Á¢Ê±¼ä
000004  2002              MOVS     r0,#2
000006  9001              STR      r0,[sp,#4]
;;;115        p.FSMC_AddressHoldTime = 0x00;	 		//µØÖ·±£³ÖÊ±¼ä
000008  2000              MOVS     r0,#0
00000a  9002              STR      r0,[sp,#8]
;;;116        p.FSMC_DataSetupTime = 0x05;			//Êý¾Ý½¨Á¢Ê±¼ä
00000c  2005              MOVS     r0,#5
00000e  9003              STR      r0,[sp,#0xc]
;;;117        p.FSMC_BusTurnAroundDuration = 0x00;
000010  2000              MOVS     r0,#0
000012  9004              STR      r0,[sp,#0x10]
;;;118        p.FSMC_CLKDivision = 0x00;
000014  9005              STR      r0,[sp,#0x14]
;;;119        p.FSMC_DataLatency = 0x00;
000016  9006              STR      r0,[sp,#0x18]
;;;120    
;;;121        p.FSMC_AccessMode = FSMC_AccessMode_B;	// Ò»°ãÊ¹ÓÃÄ£Ê½BÀ´¿ØÖÆLCD
000018  f04f5080          MOV      r0,#0x10000000
00001c  9007              STR      r0,[sp,#0x1c]
;;;122    
;;;123        FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM1;
00001e  2000              MOVS     r0,#0
000020  9008              STR      r0,[sp,#0x20]
;;;124        FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
000022  9009              STR      r0,[sp,#0x24]
;;;125        FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_NOR;
000024  2008              MOVS     r0,#8
000026  900a              STR      r0,[sp,#0x28]
;;;126        FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
000028  2010              MOVS     r0,#0x10
00002a  900b              STR      r0,[sp,#0x2c]
;;;127        FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
00002c  2000              MOVS     r0,#0
00002e  900c              STR      r0,[sp,#0x30]
;;;128        FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
000030  900e              STR      r0,[sp,#0x38]
;;;129        FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
000032  900f              STR      r0,[sp,#0x3c]
;;;130        FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
000034  9010              STR      r0,[sp,#0x40]
;;;131        FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
000036  f44f5080          MOV      r0,#0x1000
00003a  9011              STR      r0,[sp,#0x44]
;;;132        FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
00003c  2000              MOVS     r0,#0
00003e  9012              STR      r0,[sp,#0x48]
;;;133        FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
000040  9013              STR      r0,[sp,#0x4c]
;;;134        FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
000042  9014              STR      r0,[sp,#0x50]
;;;135        FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &p;
000044  a801              ADD      r0,sp,#4
000046  9015              STR      r0,[sp,#0x54]
;;;136        FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &p;
000048  9016              STR      r0,[sp,#0x58]
;;;137    
;;;138        FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure);
00004a  a808              ADD      r0,sp,#0x20
00004c  f7fffffe          BL       FSMC_NORSRAMInit
;;;139    
;;;140        /* Enable FSMC Bank1_SRAM Bank */
;;;141        FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM1, ENABLE);
000050  2101              MOVS     r1,#1
000052  2000              MOVS     r0,#0
000054  f7fffffe          BL       FSMC_NORSRAMCmd
;;;142    }
000058  b017              ADD      sp,sp,#0x5c
00005a  bd00              POP      {pc}
;;;143    
                          ENDP


                          AREA ||i.LCD_GPIO_Config||, CODE, READONLY, ALIGN=2

                  LCD_GPIO_Config PROC
;;;27     *******************************************************************************/
;;;28      void LCD_GPIO_Config(void)
000000  b508              PUSH     {r3,lr}
;;;29     {
;;;30         GPIO_InitTypeDef GPIO_InitStructure;
;;;31     
;;;32         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000002  2010              MOVS     r0,#0x10
000004  f88d0003          STRB     r0,[sp,#3]
;;;33         GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000008  2003              MOVS     r0,#3
00000a  f88d0002          STRB     r0,[sp,#2]
;;;34     
;;;35         /* config tft rst gpio */
;;;36         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 |GPIO_Pin_2;
00000e  f2420004          MOV      r0,#0x2004
000012  f8ad0000          STRH     r0,[sp,#0]
;;;37         GPIO_Init(GPIOD, &GPIO_InitStructure);
000016  4669              MOV      r1,sp
000018  482a              LDR      r0,|L8.196|
00001a  f7fffffe          BL       GPIO_Init
;;;38     
;;;39         /* config tft back_light gpio base on the PT4101 */
;;;40         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
00001e  2002              MOVS     r0,#2
000020  f8ad0000          STRH     r0,[sp,#0]
;;;41         GPIO_Init(GPIOA, &GPIO_InitStructure);
000024  4669              MOV      r1,sp
000026  4828              LDR      r0,|L8.200|
000028  f7fffffe          BL       GPIO_Init
;;;42     
;;;43         /* config tft rst gpio */
;;;44         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
00002c  2008              MOVS     r0,#8
00002e  f8ad0000          STRH     r0,[sp,#0]
;;;45         GPIO_Init(GPIOB, &GPIO_InitStructure);
000032  4669              MOV      r1,sp
000034  4825              LDR      r0,|L8.204|
000036  f7fffffe          BL       GPIO_Init
;;;46     
;;;47         /* config tft data lines base on FSMC
;;;48     	 * data lines,FSMC-D0~D15: PD 14 15 0 1,PE 7 8 9 10 11 12 13 14 15,PD 10
;;;49     	 */
;;;50         GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00003a  2003              MOVS     r0,#3
00003c  f88d0002          STRB     r0,[sp,#2]
;;;51         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
000040  2018              MOVS     r0,#0x18
000042  f88d0003          STRB     r0,[sp,#3]
;;;52     
;;;53         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 |GPIO_Pin_1 |
000046  f24c4003          MOV      r0,#0xc403
00004a  f8ad0000          STRH     r0,[sp,#0]
;;;54         		GPIO_Pin_10 | GPIO_Pin_14 | GPIO_Pin_15;
;;;55         GPIO_Init(GPIOD, &GPIO_InitStructure);
00004e  4669              MOV      r1,sp
000050  481c              LDR      r0,|L8.196|
000052  f7fffffe          BL       GPIO_Init
;;;56     
;;;57         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 |
000056  f44f60f0          MOV      r0,#0x780
00005a  f8ad0000          STRH     r0,[sp,#0]
;;;58         		GPIO_Pin_10 ;
;;;59         GPIO_Init(GPIOE, &GPIO_InitStructure);
00005e  4669              MOV      r1,sp
000060  481b              LDR      r0,|L8.208|
000062  f7fffffe          BL       GPIO_Init
;;;60     
;;;61         /* config tft control lines base on FSMC
;;;62     	 * PD4-FSMC_NOE  :LCD-RD
;;;63     	 * PD5-FSMC_NWE  :LCD-WR
;;;64     	 * PD7-FSMC_NE1  :LCD-CS
;;;65     	 * PD11-FSMC_A16 :LCD-DC
;;;66     	 */
;;;67         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
000066  2010              MOVS     r0,#0x10
000068  f8ad0000          STRH     r0,[sp,#0]
;;;68         GPIO_Init(GPIOD, &GPIO_InitStructure);
00006c  4669              MOV      r1,sp
00006e  4815              LDR      r0,|L8.196|
000070  f7fffffe          BL       GPIO_Init
;;;69     
;;;70         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
000074  2020              MOVS     r0,#0x20
000076  f8ad0000          STRH     r0,[sp,#0]
;;;71         GPIO_Init(GPIOD, &GPIO_InitStructure);
00007a  4669              MOV      r1,sp
00007c  4811              LDR      r0,|L8.196|
00007e  f7fffffe          BL       GPIO_Init
;;;72     
;;;73         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
000082  2080              MOVS     r0,#0x80
000084  f8ad0000          STRH     r0,[sp,#0]
;;;74         GPIO_Init(GPIOD, &GPIO_InitStructure);
000088  4669              MOV      r1,sp
00008a  480e              LDR      r0,|L8.196|
00008c  f7fffffe          BL       GPIO_Init
;;;75     
;;;76         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
000090  f44f6000          MOV      r0,#0x800
000094  f8ad0000          STRH     r0,[sp,#0]
;;;77         GPIO_Init(GPIOD, &GPIO_InitStructure);
000098  4669              MOV      r1,sp
00009a  480a              LDR      r0,|L8.196|
00009c  f7fffffe          BL       GPIO_Init
;;;78     
;;;79         /* tft control gpio init */
;;;80         GPIO_SetBits(GPIOD, GPIO_Pin_4);		 	// RD = 1
0000a0  2110              MOVS     r1,#0x10
0000a2  4808              LDR      r0,|L8.196|
0000a4  f7fffffe          BL       GPIO_SetBits
;;;81         GPIO_SetBits(GPIOD, GPIO_Pin_5);		 	// WR = 1
0000a8  2120              MOVS     r1,#0x20
0000aa  4806              LDR      r0,|L8.196|
0000ac  f7fffffe          BL       GPIO_SetBits
;;;82         GPIO_SetBits(GPIOD, GPIO_Pin_7);		 	// CS = 1
0000b0  2180              MOVS     r1,#0x80
0000b2  4804              LDR      r0,|L8.196|
0000b4  f7fffffe          BL       GPIO_SetBits
;;;83         GPIO_SetBits(GPIOD, GPIO_Pin_13);			// RST = 1
0000b8  f44f5100          MOV      r1,#0x2000
0000bc  4801              LDR      r0,|L8.196|
0000be  f7fffffe          BL       GPIO_SetBits
;;;84     
;;;85     }
0000c2  bd08              POP      {r3,pc}
;;;86     
                          ENDP

                  |L8.196|
                          DCD      0x40011400
                  |L8.200|
                          DCD      0x40010800
                  |L8.204|
                          DCD      0x40010c00
                  |L8.208|
                          DCD      0x40011800

                          AREA ||i.LCD_Rst||, CODE, READONLY, ALIGN=2

                  LCD_Rst PROC
;;;175    /******************************************************************************/
;;;176    volatile static void LCD_Rst(void)
000000  b510              PUSH     {r4,lr}
;;;177    {
;;;178        Clr_Rst;
000002  f44f5000          MOV      r0,#0x2000
000006  4908              LDR      r1,|L9.40|
000008  6008              STR      r0,[r1,#0]
;;;179        Delay(10000);
00000a  f2427010          MOV      r0,#0x2710
00000e  f7fffffe          BL       Delay
;;;180        Set_Rst;
000012  f44f5000          MOV      r0,#0x2000
000016  4904              LDR      r1,|L9.40|
000018  1f09              SUBS     r1,r1,#4
00001a  6008              STR      r0,[r1,#0]
;;;181        Delay(10000);
00001c  f2427010          MOV      r0,#0x2710
000020  f7fffffe          BL       Delay
;;;182    }
000024  bd10              POP      {r4,pc}
;;;183    
                          ENDP

000026  0000              DCW      0x0000
                  |L9.40|
                          DCD      0x40011414

                          AREA ||i.LCD_WR_REG||, CODE, READONLY, ALIGN=2

                  LCD_WR_REG PROC
;;;320    *******************************************************************************/
;;;321    void LCD_WR_REG(u16 Index,u16 CongfigTemp)
000000  f04f42c0          MOV      r2,#0x60000000
;;;322    {
;;;323    	*(__IO u16 *) (Bank1_LCD_C) = Index;
000004  8010              STRH     r0,[r2,#0]
;;;324    	*(__IO u16 *) (Bank1_LCD_D) = CongfigTemp;
000006  4a01              LDR      r2,|L10.12|
000008  8011              STRH     r1,[r2,#0]
;;;325    }
00000a  4770              BX       lr
;;;326    
                          ENDP

                  |L10.12|
                          DCD      0x60020000

                          AREA ||i.Lcd_ColorBox||, CODE, READONLY, ALIGN=2

                  Lcd_ColorBox PROC
;;;401    *******************************************************************************/
;;;402    void Lcd_ColorBox(u16 xStart,u16 yStart,u16 xLong,u16 yLong,u16 Color)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;403    {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
00000c  f8dd8020          LDR      r8,[sp,#0x20]
;;;404    	u32 temp;
;;;405    	BlockWrite(xStart,xStart+xLong-1,yStart,yStart+yLong-1);
000010  19a0              ADDS     r0,r4,r6
000012  1e43              SUBS     r3,r0,#1
000014  1978              ADDS     r0,r7,r5
000016  1e41              SUBS     r1,r0,#1
000018  4622              MOV      r2,r4
00001a  4638              MOV      r0,r7
00001c  f7fffffe          BL       BlockWrite
;;;406    	for (temp=0; temp<xLong*yLong; temp++)
000020  f04f0900          MOV      r9,#0
000024  e008              B        |L11.56|
                  |L11.38|
;;;407    	{
;;;408    		*(__IO u16 *) (Bank1_LCD_D) = Color>>8;
000026  ea4f2028          ASR      r0,r8,#8
00002a  4906              LDR      r1,|L11.68|
00002c  8008              STRH     r0,[r1,#0]
;;;409    		*(__IO u16 *) (Bank1_LCD_D) = Color;
00002e  4608              MOV      r0,r1
000030  f8a08000          STRH     r8,[r0,#0]
000034  f1090901          ADD      r9,r9,#1              ;406
                  |L11.56|
000038  fb05f006          MUL      r0,r5,r6              ;406
00003c  4548              CMP      r0,r9                 ;406
00003e  d8f2              BHI      |L11.38|
;;;410    	}
;;;411    }
000040  e8bd87f0          POP      {r4-r10,pc}
;;;412    
                          ENDP

                  |L11.68|
                          DCD      0x60020000

                          AREA ||i.Lcd_ColorSpot||, CODE, READONLY, ALIGN=2

                  Lcd_ColorSpot PROC
;;;439    *******************************************************************************/
;;;440    void Lcd_ColorSpot(u16 xStart,u16 yStart,u16 Color)
000000  b570              PUSH     {r4-r6,lr}
;;;441    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;442    
;;;443    	BlockWrite_Test(xStart,yStart);
000008  4631              MOV      r1,r6
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       BlockWrite_Test
;;;444    	*(__IO u16 *) (Bank1_LCD_D) = Color>>8;
000010  1220              ASRS     r0,r4,#8
000012  4902              LDR      r1,|L12.28|
000014  8008              STRH     r0,[r1,#0]
;;;445    	*(__IO u16 *) (Bank1_LCD_D) = Color;
000016  4608              MOV      r0,r1
000018  8004              STRH     r4,[r0,#0]
;;;446    }
00001a  bd70              POP      {r4-r6,pc}
;;;447    
                          ENDP

                  |L12.28|
                          DCD      0x60020000

                          AREA ||i.Lcd_Display_Clear||, CODE, READONLY, ALIGN=2

                  Lcd_Display_Clear PROC
;;;418    *******************************************************************************/
;;;419    void Lcd_Display_Clear(void)
000000  b510              PUSH     {r4,lr}
;;;420    {
;;;421    	u32 temp;
;;;422    	BlockWrite(0,127,0,159);
000002  239f              MOVS     r3,#0x9f
000004  2200              MOVS     r2,#0
000006  217f              MOVS     r1,#0x7f
000008  4610              MOV      r0,r2
00000a  f7fffffe          BL       BlockWrite
;;;423    	for (temp=0; temp<128*160; temp++)
00000e  2400              MOVS     r4,#0
000010  e004              B        |L13.28|
                  |L13.18|
;;;424    	{
;;;425    		*(__IO u16 *) (Bank1_LCD_D) = 0>>8;
000012  2000              MOVS     r0,#0
000014  4903              LDR      r1,|L13.36|
000016  8008              STRH     r0,[r1,#0]
;;;426    		*(__IO u16 *) (Bank1_LCD_D) = 0;
000018  8008              STRH     r0,[r1,#0]
00001a  1c64              ADDS     r4,r4,#1              ;423
                  |L13.28|
00001c  f5b44fa0          CMP      r4,#0x5000            ;423
000020  d3f7              BCC      |L13.18|
;;;427    	}
;;;428    }
000022  bd10              POP      {r4,pc}
;;;429    
                          ENDP

                  |L13.36|
                          DCD      0x60020000

                          AREA ||i.Lcd_WR_Start||, CODE, READONLY, ALIGN=1

                  Lcd_WR_Start PROC
;;;330    *******************************************************************************/
;;;331    void Lcd_WR_Start(void)
000000  202c              MOVS     r0,#0x2c
;;;332    {
;;;333    *(__IO u16 *) (Bank1_LCD_C) = 0x2C;
000002  06c1              LSLS     r1,r0,#27
000004  8008              STRH     r0,[r1,#0]
;;;334    }
000006  4770              BX       lr
;;;335    
                          ENDP


                          AREA ||i.RCC_Configuration||, CODE, READONLY, ALIGN=2

                  RCC_Configuration PROC
;;;87     /******************************************************************************/
;;;88      void RCC_Configuration(void)
000000  b510              PUSH     {r4,lr}
;;;89      {
;;;90     	/* Enable the FSMC Clock */
;;;91     	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_FSMC, ENABLE);
000002  2101              MOVS     r1,#1
000004  0208              LSLS     r0,r1,#8
000006  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;92     
;;;93     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB
00000a  2101              MOVS     r1,#1
00000c  207d              MOVS     r0,#0x7d
00000e  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;94     				| RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD| RCC_APB2Periph_GPIOE
;;;95     				| RCC_APB2Periph_AFIO , ENABLE);
;;;96     
;;;97     		/* Disable JTAG but enable SWD because PB3/4 are used for GPIO */
;;;98     		GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);
000012  2101              MOVS     r1,#1
000014  4801              LDR      r0,|L15.28|
000016  f7fffffe          BL       GPIO_PinRemapConfig
;;;99      }
00001a  bd10              POP      {r4,pc}
;;;100    
                          ENDP

                  |L15.28|
                          DCD      0x00300200

                          AREA ||i.ReadPixel||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  ReadPixel PROC
;;;196    /******************************************************************************/
;;;197    u16 ReadPixel(u16 x,u8 y)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;198    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
;;;199    	u16 dat,temp;
;;;200    	WriteComm(0x2a);
000008  202a              MOVS     r0,#0x2a
00000a  f7fffffe          BL       WriteComm
;;;201    	WriteData(x>>8);
00000e  1230              ASRS     r0,r6,#8
000010  f7fffffe          BL       WriteData
;;;202    	WriteData(x&0xff);
000014  b2f0              UXTB     r0,r6
000016  f7fffffe          BL       WriteData
;;;203    	WriteComm(0x2b);
00001a  202b              MOVS     r0,#0x2b
00001c  f7fffffe          BL       WriteComm
;;;204    	WriteData(y>>8);
000020  1220              ASRS     r0,r4,#8
000022  f7fffffe          BL       WriteData
;;;205    	WriteData(y&0xff);
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       WriteData
;;;206    	WriteComm(0x2e);
00002c  202e              MOVS     r0,#0x2e
00002e  f7fffffe          BL       WriteComm
;;;207    	dat = *(__IO u16 *) (Bank1_LCD_D);printf("dat_1=%04x\r\n",dat);
000032  480e              LDR      r0,|L16.108|
000034  8805              LDRH     r5,[r0,#0]
000036  4629              MOV      r1,r5
000038  a00d              ADR      r0,|L16.112|
00003a  f7fffffe          BL       __2printf
;;;208    	dat = *(__IO u16 *) (Bank1_LCD_D);printf("dat_2=%04x\r\n",dat);
00003e  480b              LDR      r0,|L16.108|
000040  8805              LDRH     r5,[r0,#0]
000042  4629              MOV      r1,r5
000044  a00e              ADR      r0,|L16.128|
000046  f7fffffe          BL       __2printf
;;;209    	temp = *(__IO u16 *) (Bank1_LCD_D);printf("dat_3=%04x\r\n",temp);
00004a  4808              LDR      r0,|L16.108|
00004c  8807              LDRH     r7,[r0,#0]
00004e  4639              MOV      r1,r7
000050  a00f              ADR      r0,|L16.144|
000052  f7fffffe          BL       __2printf
;;;210    	dat = (dat&0xf800)|((dat&0x00fc)<<3)|(temp&0xFF00)>>11;
000056  f4054078          AND      r0,r5,#0xf800
00005a  f00501fc          AND      r1,r5,#0xfc
00005e  ea4000c1          ORR      r0,r0,r1,LSL #3
000062  ea4025d7          ORR      r5,r0,r7,LSR #11
;;;211    	return dat;
000066  4628              MOV      r0,r5
;;;212    }
000068  e8bd81f0          POP      {r4-r8,pc}
;;;213    
                          ENDP

                  |L16.108|
                          DCD      0x60020000
                  |L16.112|
000070  6461745f          DCB      "dat_1=%04x\r\n",0
000074  313d2530
000078  34780d0a
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0
                  |L16.128|
000080  6461745f          DCB      "dat_2=%04x\r\n",0
000084  323d2530
000088  34780d0a
00008c  00      
00008d  00                DCB      0
00008e  00                DCB      0
00008f  00                DCB      0
                  |L16.144|
000090  6461745f          DCB      "dat_3=%04x\r\n",0
000094  333d2530
000098  34780d0a
00009c  00      
00009d  00                DCB      0
00009e  00                DCB      0
00009f  00                DCB      0

                          AREA ||i.WriteComm||, CODE, READONLY, ALIGN=1

                  WriteComm PROC
;;;184    /******************************************************************************/
;;;185    static void WriteComm(u16 CMD)
000000  f04f41c0          MOV      r1,#0x60000000
;;;186    {
;;;187    	*(__IO u16 *) (Bank1_LCD_C) = CMD;
000004  8008              STRH     r0,[r1,#0]
;;;188    }
000006  4770              BX       lr
;;;189    
                          ENDP


                          AREA ||i.WriteData||, CODE, READONLY, ALIGN=2

                  WriteData PROC
;;;190    /******************************************************************************/
;;;191    static void WriteData(u16 tem_data)
000000  4901              LDR      r1,|L18.8|
;;;192    {
;;;193    	*(__IO u16 *) (Bank1_LCD_D) = tem_data;
000002  8008              STRH     r0,[r1,#0]
;;;194    }
000004  4770              BX       lr
;;;195    
                          ENDP

000006  0000              DCW      0x0000
                  |L18.8|
                          DCD      0x60020000

                          AREA ||i.ssd1289_GetPoint||, CODE, READONLY, ALIGN=2

                  ssd1289_GetPoint PROC
;;;158    /******************************************************************************/
;;;159    u16 ssd1289_GetPoint(u16 x,u8 y)
000000  b510              PUSH     {r4,lr}
;;;160    {
000002  4602              MOV      r2,r0
;;;161    	 u16 a = 0;
000004  2000              MOVS     r0,#0
;;;162    
;;;163    	*(__IO u16 *) (Bank1_LCD_C) = 0x4f;
000006  234f              MOVS     r3,#0x4f
000008  f04f44c0          MOV      r4,#0x60000000
00000c  8023              STRH     r3,[r4,#0]
;;;164    	*(__IO u16 *) (Bank1_LCD_D) = x;
00000e  4b05              LDR      r3,|L19.36|
000010  801a              STRH     r2,[r3,#0]
;;;165    
;;;166    	*(__IO u16 *) (Bank1_LCD_C) = 0x4e;
000012  234e              MOVS     r3,#0x4e
000014  8023              STRH     r3,[r4,#0]
;;;167    	*(__IO u16 *) (Bank1_LCD_D) = y;
000016  4b03              LDR      r3,|L19.36|
000018  8019              STRH     r1,[r3,#0]
;;;168    
;;;169    	*(__IO u16 *) (Bank1_LCD_C) = 0x22;
00001a  2322              MOVS     r3,#0x22
00001c  8023              STRH     r3,[r4,#0]
;;;170    
;;;171    	 a = *(__IO u16 *) (Bank1_LCD_D);
00001e  4b01              LDR      r3,|L19.36|
000020  8818              LDRH     r0,[r3,#0]
;;;172       return(a);
;;;173    }
000022  bd10              POP      {r4,pc}
;;;174    
                          ENDP

                  |L19.36|
                          DCD      0x60020000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  bmp
                          %        70
