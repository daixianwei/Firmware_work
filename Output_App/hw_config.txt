; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\Output_App\hw_config.o --asm_dir=..\Output_App\ --list_dir=..\Output_App\ --depend=..\Output_App\hw_config.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I.\System\CM3 -I.\System\FWlib\inc -I.\System\Startup -I.\ISR -I.\Main -I.\Management\DisplayDriver -I.\Management\HumanInput -I.\Management\Interface -I.\Management\RotationMotor -I.\Management\ScanMotor -I.\Management\Common_CRC -I.\Management\QRCode -I.\Management\SystemManage_RTC -I.\Management\SignalProcess_Sample -I.\USB -I.\USB\comm -I.\USB\lib -I.\USB\src -I.\USB\USB_Communication -ID:\Keil4.0\ARM\RV31\Inc -ID:\Keil4.0\ARM\CMSIS\Include -ID:\Keil4.0\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DUSE_STM3210E_EVAL -W --omf_browse=..\Output_App\hw_config.crf USB\src\hw_config.c]
                          THUMB

                          AREA ||i.Enter_LowPowerMode||, CODE, READONLY, ALIGN=2

                  Enter_LowPowerMode PROC
;;;99     *******************************************************************************/
;;;100    void Enter_LowPowerMode(void)
000000  2003              MOVS     r0,#3
;;;101    {
;;;102      /* Set the device state to suspend */
;;;103      bDeviceState = SUSPENDED;
000002  4901              LDR      r1,|L1.8|
000004  6008              STR      r0,[r1,#0]  ; bDeviceState
;;;104    }
000006  4770              BX       lr
;;;105    
                          ENDP

                  |L1.8|
                          DCD      bDeviceState

                          AREA ||i.Get_SerialNum||, CODE, READONLY, ALIGN=2

                  Get_SerialNum PROC
;;;196    *******************************************************************************/
;;;197    void Get_SerialNum(void)
000000  b570              PUSH     {r4-r6,lr}
;;;198    {
;;;199      uint32 Device_Serial0, Device_Serial1, Device_Serial2;
;;;200    
;;;201      Device_Serial0 = *(uint32*)ID1;
000002  480a              LDR      r0,|L2.44|
000004  6804              LDR      r4,[r0,#0]
;;;202      Device_Serial1 = *(uint32*)ID2;
000006  1d00              ADDS     r0,r0,#4
000008  6805              LDR      r5,[r0,#0]
;;;203      Device_Serial2 = *(uint32*)ID3;
00000a  1d00              ADDS     r0,r0,#4
00000c  6806              LDR      r6,[r0,#0]
;;;204    
;;;205      Device_Serial0 += Device_Serial2;
00000e  4434              ADD      r4,r4,r6
;;;206    
;;;207      if (Device_Serial0 != 0)
000010  b154              CBZ      r4,|L2.40|
;;;208      {
;;;209        IntToUnicode (Device_Serial0, &Virtual_Com_Port_StringSerial[2] , 8);
000012  2208              MOVS     r2,#8
000014  4906              LDR      r1,|L2.48|
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       IntToUnicode
;;;210        IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
00001c  2204              MOVS     r2,#4
00001e  4904              LDR      r1,|L2.48|
000020  3110              ADDS     r1,r1,#0x10
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       IntToUnicode
                  |L2.40|
;;;211      }
;;;212    }
000028  bd70              POP      {r4-r6,pc}
;;;213    
                          ENDP

00002a  0000              DCW      0x0000
                  |L2.44|
                          DCD      0x1ffff7e8
                  |L2.48|
                          DCD      Virtual_Com_Port_StringSerial+0x2

                          AREA ||i.IntToUnicode||, CODE, READONLY, ALIGN=1

                  IntToUnicode PROC
;;;220    *******************************************************************************/
;;;221    static void IntToUnicode (uint32 value , uint8 *pbuf , uint8 len)
000000  b530              PUSH     {r4,r5,lr}
;;;222    {
000002  460b              MOV      r3,r1
;;;223      uint8 idx = 0;
000004  2100              MOVS     r1,#0
;;;224      
;;;225      for( idx = 0 ; idx < len ; idx ++)
000006  bf00              NOP      
000008  e016              B        |L3.56|
                  |L3.10|
;;;226      {
;;;227        if( ((value >> 28)) < 0xA )
00000a  240a              MOVS     r4,#0xa
00000c  ebb47f10          CMP      r4,r0,LSR #28
000010  d905              BLS      |L3.30|
;;;228        {
;;;229          pbuf[ 2* idx] = (value >> 28) + '0';
000012  2430              MOVS     r4,#0x30
000014  eb047410          ADD      r4,r4,r0,LSR #28
000018  f8034011          STRB     r4,[r3,r1,LSL #1]
00001c  e005              B        |L3.42|
                  |L3.30|
;;;230        }
;;;231        else
;;;232        {
;;;233          pbuf[2* idx] = (value >> 28) + 'A' - 10; 
00001e  2441              MOVS     r4,#0x41
000020  eb047410          ADD      r4,r4,r0,LSR #28
000024  3c0a              SUBS     r4,r4,#0xa
000026  f8034011          STRB     r4,[r3,r1,LSL #1]
                  |L3.42|
;;;234        }
;;;235        
;;;236        value = value << 4;
00002a  0100              LSLS     r0,r0,#4
;;;237        
;;;238        pbuf[ 2* idx + 1] = 0;
00002c  2500              MOVS     r5,#0
00002e  004c              LSLS     r4,r1,#1
000030  1c64              ADDS     r4,r4,#1
000032  551d              STRB     r5,[r3,r4]
000034  1c4c              ADDS     r4,r1,#1              ;225
000036  b2e1              UXTB     r1,r4                 ;225
                  |L3.56|
000038  4291              CMP      r1,r2                 ;225
00003a  dbe6              BLT      |L3.10|
;;;239      }
;;;240    }
00003c  bd30              POP      {r4,r5,pc}
;;;241    
                          ENDP


                          AREA ||i.Leave_LowPowerMode||, CODE, READONLY, ALIGN=2

                  Leave_LowPowerMode PROC
;;;111    *******************************************************************************/
;;;112    void Leave_LowPowerMode(void)
000000  4805              LDR      r0,|L4.24|
;;;113    {
;;;114      DEVICE_INFO *pInfo = &Device_Info;
;;;115    
;;;116      /* Set the device state to the correct state */
;;;117      if (pInfo->Current_Configuration != 0)
000002  7a81              LDRB     r1,[r0,#0xa]
000004  b119              CBZ      r1,|L4.14|
;;;118      {
;;;119        /* Device configured */
;;;120        bDeviceState = CONFIGURED;
000006  2105              MOVS     r1,#5
000008  4a04              LDR      r2,|L4.28|
00000a  6011              STR      r1,[r2,#0]  ; bDeviceState
00000c  e002              B        |L4.20|
                  |L4.14|
;;;121      }
;;;122      else
;;;123      {
;;;124        bDeviceState = ATTACHED;
00000e  2101              MOVS     r1,#1
000010  4a02              LDR      r2,|L4.28|
000012  6011              STR      r1,[r2,#0]  ; bDeviceState
                  |L4.20|
;;;125      }
;;;126      /*Enable SystemCoreClock*/
;;;127    //  SystemInit();
;;;128    }
000014  4770              BX       lr
;;;129    
                          ENDP

000016  0000              DCW      0x0000
                  |L4.24|
                          DCD      Device_Info
                  |L4.28|
                          DCD      bDeviceState

                          AREA ||i.Set_System||, CODE, READONLY, ALIGN=2

                  Set_System PROC
;;;57     *******************************************************************************/
;;;58     void Set_System(void)
000000  b508              PUSH     {r3,lr}
;;;59     {
;;;60       GPIO_InitTypeDef GPIO_InitStructure;
;;;61      
;;;62       /* Enable USB_DISCONNECT GPIO clock */
;;;63       RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIO_DISCONNECT, ENABLE);
000002  2101              MOVS     r1,#1
000004  0208              LSLS     r0,r1,#8
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;64     
;;;65       /* Configure USB pull-up pin */
;;;66       GPIO_InitStructure.GPIO_Pin = USB_DISCONNECT_PIN;
00000a  f44f6000          MOV      r0,#0x800
00000e  f8ad0000          STRH     r0,[sp,#0]
;;;67       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000012  2003              MOVS     r0,#3
000014  f88d0002          STRB     r0,[sp,#2]
;;;68       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000018  2010              MOVS     r0,#0x10
00001a  f88d0003          STRB     r0,[sp,#3]
;;;69       GPIO_Init(USB_DISCONNECT, &GPIO_InitStructure);
00001e  4669              MOV      r1,sp
000020  4809              LDR      r0,|L5.72|
000022  f7fffffe          BL       GPIO_Init
;;;70       
;;;71       /* Configure the EXTI line 18 connected internally to the USB IP */
;;;72       EXTI_ClearITPendingBit(EXTI_Line18);
000026  f44f2080          MOV      r0,#0x40000
00002a  f7fffffe          BL       EXTI_ClearITPendingBit
;;;73       EXTI_InitStructure.EXTI_Line = EXTI_Line18; 
00002e  f44f2080          MOV      r0,#0x40000
000032  4906              LDR      r1,|L5.76|
000034  6008              STR      r0,[r1,#0]  ; EXTI_InitStructure
;;;74       EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
000036  2008              MOVS     r0,#8
000038  7148              STRB     r0,[r1,#5]
;;;75       EXTI_InitStructure.EXTI_LineCmd = ENABLE;
00003a  2001              MOVS     r0,#1
00003c  7188              STRB     r0,[r1,#6]
;;;76       EXTI_Init(&EXTI_InitStructure);
00003e  4608              MOV      r0,r1
000040  f7fffffe          BL       EXTI_Init
;;;77     }
000044  bd08              POP      {r3,pc}
;;;78     
                          ENDP

000046  0000              DCW      0x0000
                  |L5.72|
                          DCD      0x40012000
                  |L5.76|
                          DCD      EXTI_InitStructure

                          AREA ||i.Set_USBClock||, CODE, READONLY, ALIGN=1

                  Set_USBClock PROC
;;;84     *******************************************************************************/
;;;85     void Set_USBClock(void)
000000  b510              PUSH     {r4,lr}
;;;86     {
;;;87       /* Select USBCLK source */
;;;88       RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       RCC_USBCLKConfig
;;;89       
;;;90       /* Enable the USB clock */
;;;91       RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
000008  2101              MOVS     r1,#1
00000a  05c8              LSLS     r0,r1,#23
00000c  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;92     }
000010  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.USB_Cable_Config||, CODE, READONLY, ALIGN=2

                  USB_Cable_Config PROC
;;;157    *******************************************************************************/
;;;158    void USB_Cable_Config (FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;159    {
000002  4604              MOV      r4,r0
;;;160      if (NewState == DISABLE)
000004  b92c              CBNZ     r4,|L7.18|
;;;161      {
;;;162        GPIO_ResetBits(USB_DISCONNECT, USB_DISCONNECT_PIN);
000006  f44f6100          MOV      r1,#0x800
00000a  4805              LDR      r0,|L7.32|
00000c  f7fffffe          BL       GPIO_ResetBits
000010  e004              B        |L7.28|
                  |L7.18|
;;;163      }
;;;164      else
;;;165      {
;;;166        GPIO_SetBits(USB_DISCONNECT, USB_DISCONNECT_PIN);
000012  f44f6100          MOV      r1,#0x800
000016  4802              LDR      r0,|L7.32|
000018  f7fffffe          BL       GPIO_SetBits
                  |L7.28|
;;;167      }
;;;168    }
00001c  bd10              POP      {r4,pc}
;;;169    
                          ENDP

00001e  0000              DCW      0x0000
                  |L7.32|
                          DCD      0x40012000

                          AREA ||i.USB_Config||, CODE, READONLY, ALIGN=1

                  USB_Config PROC
;;;177    *******************************************************************************/
;;;178    void USB_Config(void)
000000  b510              PUSH     {r4,lr}
;;;179    {
;;;180        Set_System();
000002  f7fffffe          BL       Set_System
;;;181    
;;;182        Set_USBClock();
000006  f7fffffe          BL       Set_USBClock
;;;183    
;;;184        USB_Interrupts_Config();
00000a  f7fffffe          BL       USB_Interrupts_Config
;;;185    
;;;186        USB_Init();
00000e  f7fffffe          BL       USB_Init
;;;187    }
000012  bd10              POP      {r4,pc}
;;;188    
                          ENDP


                          AREA ||i.USB_Interrupts_Config||, CODE, READONLY, ALIGN=1

                  USB_Interrupts_Config PROC
;;;135    *******************************************************************************/
;;;136    void USB_Interrupts_Config(void)
000000  b508              PUSH     {r3,lr}
;;;137    {
;;;138      NVIC_InitTypeDef NVIC_InitStructure; 
;;;139    
;;;140      NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
000002  2014              MOVS     r0,#0x14
000004  f88d0000          STRB     r0,[sp,#0]
;;;141      NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
000008  2002              MOVS     r0,#2
00000a  f88d0001          STRB     r0,[sp,#1]
;;;142      NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
00000e  2000              MOVS     r0,#0
000010  f88d0002          STRB     r0,[sp,#2]
;;;143      NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000014  2001              MOVS     r0,#1
000016  f88d0003          STRB     r0,[sp,#3]
;;;144      NVIC_Init(&NVIC_InitStructure);
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       NVIC_Init
;;;145      
;;;146    //    /* Enable the USB Wake-up interrupt */
;;;147    //  NVIC_InitStructure.NVIC_IRQChannel = USBWakeUp_IRQn;
;;;148    //  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
;;;149    //  NVIC_Init(&NVIC_InitStructure);
;;;150    }
000020  bd08              POP      {r3,pc}
;;;151    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  USART_InitStructure
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  HSEStartUpStatus
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  EXTI_InitStructure
                          %        8
